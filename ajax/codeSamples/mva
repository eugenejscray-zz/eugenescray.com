<!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%">   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
  40
  41
  42
  43
  44
  45
  46
  47
  48
  49
  50
  51
  52
  53
  54
  55
  56
  57
  58
  59
  60
  61
  62
  63
  64
  65
  66
  67
  68
  69
  70
  71
  72
  73
  74
  75
  76
  77
  78
  79
  80
  81
  82
  83
  84
  85
  86
  87
  88
  89
  90
  91
  92
  93
  94
  95
  96
  97
  98
  99
 100
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
 120
 121
 122
 123
 124
 125
 126
 127
 128
 129
 130
 131
 132
 133
 134
 135
 136
 137
 138
 139
 140
 141
 142
 143
 144
 145
 146
 147
 148
 149
 150
 151
 152
 153
 154
 155
 156
 157
 158
 159
 160
 161
 162
 163
 164
 165
 166
 167
 168
 169
 170
 171
 172
 173
 174
 175
 176
 177
 178
 179
 180
 181
 182
 183
 184
 185
 186
 187
 188
 189
 190
 191
 192
 193
 194
 195
 196
 197
 198
 199
 200
 201
 202
 203
 204
 205
 206
 207
 208
 209
 210
 211
 212
 213
 214
 215
 216
 217
 218
 219
 220
 221
 222
 223
 224
 225
 226
 227
 228
 229
 230
 231
 232
 233
 234
 235
 236
 237
 238
 239
 240
 241
 242
 243
 244
 245
 246
 247
 248
 249
 250
 251
 252
 253
 254
 255
 256
 257
 258
 259
 260
 261
 262
 263
 264
 265
 266
 267
 268
 269
 270
 271
 272
 273
 274
 275
 276
 277
 278
 279
 280
 281
 282
 283
 284
 285
 286
 287
 288
 289
 290
 291
 292
 293
 294
 295
 296
 297
 298
 299
 300
 301
 302
 303
 304
 305
 306
 307
 308
 309
 310
 311
 312
 313
 314
 315
 316
 317
 318
 319
 320
 321
 322
 323
 324
 325
 326
 327
 328
 329
 330
 331
 332
 333
 334
 335
 336
 337
 338
 339
 340
 341
 342
 343
 344
 345
 346
 347
 348
 349
 350
 351
 352
 353
 354
 355
 356
 357
 358
 359
 360
 361
 362
 363
 364
 365
 366
 367
 368
 369
 370
 371
 372
 373
 374
 375
 376
 377
 378
 379
 380
 381
 382
 383
 384
 385
 386
 387
 388
 389
 390
 391
 392
 393
 394
 395
 396
 397
 398
 399
 400
 401
 402
 403
 404
 405
 406
 407
 408
 409
 410
 411
 412
 413
 414
 415
 416
 417
 418
 419
 420
 421
 422
 423
 424
 425
 426
 427
 428
 429
 430
 431
 432
 433
 434
 435
 436
 437
 438
 439
 440
 441
 442
 443
 444
 445
 446
 447
 448
 449
 450
 451
 452
 453
 454
 455
 456
 457
 458
 459
 460
 461
 462
 463
 464
 465
 466
 467
 468
 469
 470
 471
 472
 473
 474
 475
 476
 477
 478
 479
 480
 481
 482
 483
 484
 485
 486
 487
 488
 489
 490
 491
 492
 493
 494
 495
 496
 497
 498
 499
 500
 501
 502
 503
 504
 505
 506
 507
 508
 509
 510
 511
 512
 513
 514
 515
 516
 517
 518
 519
 520
 521
 522
 523
 524
 525
 526
 527
 528
 529
 530
 531
 532
 533
 534
 535
 536
 537
 538
 539
 540
 541
 542
 543
 544
 545
 546
 547
 548
 549
 550
 551
 552
 553
 554
 555
 556
 557
 558
 559
 560
 561
 562
 563
 564
 565
 566
 567
 568
 569
 570
 571
 572
 573
 574
 575
 576
 577
 578
 579
 580
 581
 582
 583
 584
 585
 586
 587
 588
 589
 590
 591
 592
 593
 594
 595
 596
 597
 598
 599
 600
 601
 602
 603
 604
 605
 606
 607
 608
 609
 610
 611
 612
 613
 614
 615
 616
 617
 618
 619
 620
 621
 622
 623
 624
 625
 626
 627
 628
 629
 630
 631
 632
 633
 634
 635
 636
 637
 638
 639
 640
 641
 642
 643
 644
 645
 646
 647
 648
 649
 650
 651
 652
 653
 654
 655
 656
 657
 658
 659
 660
 661
 662
 663
 664
 665
 666
 667
 668
 669
 670
 671
 672
 673
 674
 675
 676
 677
 678
 679
 680
 681
 682
 683
 684
 685
 686
 687
 688
 689
 690
 691
 692
 693
 694
 695
 696
 697
 698
 699
 700
 701
 702
 703
 704
 705
 706
 707
 708
 709
 710
 711
 712
 713
 714
 715
 716
 717
 718
 719
 720
 721
 722
 723
 724
 725
 726
 727
 728
 729
 730
 731
 732
 733
 734
 735
 736
 737
 738
 739
 740
 741
 742
 743
 744
 745
 746
 747
 748
 749
 750
 751
 752
 753
 754
 755
 756
 757
 758
 759
 760
 761
 762
 763
 764
 765
 766
 767
 768
 769
 770
 771
 772
 773
 774
 775
 776
 777
 778
 779
 780
 781
 782
 783
 784
 785
 786
 787
 788
 789
 790
 791
 792
 793
 794
 795
 796
 797
 798
 799
 800
 801
 802
 803
 804
 805
 806
 807
 808
 809
 810
 811
 812
 813
 814
 815
 816
 817
 818
 819
 820
 821
 822
 823
 824
 825
 826
 827
 828
 829
 830
 831
 832
 833
 834
 835
 836
 837
 838
 839
 840
 841
 842
 843
 844
 845
 846
 847
 848
 849
 850
 851
 852
 853
 854
 855
 856
 857
 858
 859
 860
 861
 862
 863
 864
 865
 866
 867
 868
 869
 870
 871
 872
 873
 874
 875
 876
 877
 878
 879
 880
 881
 882
 883
 884
 885
 886
 887
 888
 889
 890
 891
 892
 893
 894
 895
 896
 897
 898
 899
 900
 901
 902
 903
 904
 905
 906
 907
 908
 909
 910
 911
 912
 913
 914
 915
 916
 917
 918
 919
 920
 921
 922
 923
 924
 925
 926
 927
 928
 929
 930
 931
 932
 933
 934
 935
 936
 937
 938
 939
 940
 941
 942
 943
 944
 945
 946
 947
 948
 949
 950
 951
 952
 953
 954
 955
 956
 957
 958
 959
 960
 961
 962
 963
 964
 965
 966
 967
 968
 969
 970
 971
 972
 973
 974
 975
 976
 977
 978
 979
 980
 981
 982
 983
 984
 985
 986
 987
 988
 989
 990
 991
 992
 993
 994
 995
 996
 997
 998
 999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379</pre></td><td><pre style="margin: 0; line-height: 125%">/*+**********************************************************************************
 * The contents of this file are subject to the vtiger CRM Public License Version 1.0
 * (&quot;License&quot;); You may not use this file except in compliance with the License
 * The Original Code is:  vtiger CRM Open Source
 * The Initial Developer of the Original Code is vtiger.
 * Portions created by vtiger are Copyright (C) vtiger.
 * All Rights Reserved.
 ************************************************************************************/
require_once (&#39;data/CRMEntity.php&#39;);
require_once (&#39;data/Tracker.php&#39;);

// ini_set(&#39;display_errors&#39;, 1);error_reporting(E_ALL);

class Chimney extends CRMEntity
{
    var $db, $log;
     // Used in class functions of CRMEntity

    var $table_name = &#39;vtiger_chimney&#39;;
    var $table_index = &#39;chimneyid&#39;;
    var $column_fields = Array();

    /** Indicator if this is a custom module or standard module */
    var $IsCustomModule = true;

    /**
     * Mandatory table for supporting custom fields.
     */
    var $customFieldTable = Array(&#39;vtiger_chimneycf&#39;, &#39;chimneyid&#39;);

    /**
     * Mandatory for Saving, Include tables related to this module.
     */
    var $tab_name = Array(&#39;vtiger_crmentity&#39;, &#39;vtiger_chimney&#39;, &#39;vtiger_chimneycf&#39;);

    /**
     * Mandatory for Saving, Include tablename and tablekey columnname here.
     */
    var $tab_name_index = Array(&#39;vtiger_crmentity&#39; =&gt; &#39;crmid&#39;, &#39;vtiger_chimney&#39; =&gt; &#39;chimneyid&#39;, &#39;vtiger_chimneycf&#39; =&gt; &#39;chimneyid&#39;);

    /**
     * Mandatory for Listing (Related listview)
     */
    var $list_fields = Array(

    /* Format: Field Label =&gt; Array(tablename, columnname) */

    // tablename should not have prefix &#39;vtiger_&#39;
    &#39;CustomModule Name&#39; =&gt; Array(&#39;chimney&#39;, &#39;chimneyname&#39;), &#39;CustomModule Type&#39; =&gt; Array(&#39;chimney&#39;, &#39;chimneytype&#39;), &#39;Woodburning FP&#39; =&gt; Array(&#39;chimney&#39;, &#39;woodburning&#39;), &#39;Gas FP&#39; =&gt; Array(&#39;chimney&#39;, &#39;gasfp&#39;), &#39;Woodbrn Stove&#39; =&gt; Array(&#39;chimney&#39;, &#39;woodbrn_stove&#39;), &#39;Assigned To&#39; =&gt; Array(&#39;crmentity&#39;, &#39;smownerid&#39;));
    var $list_fields_name = Array(

    /* Format: Field Label =&gt; fieldname */
    &#39;CustomModule Name&#39; =&gt; &#39;chimneyname&#39;, &#39;CustomModule Type&#39; =&gt; &#39;chimneytype&#39;, &#39;Woodburning FP&#39; =&gt; &#39;woodburning&#39;, &#39;Gas FP&#39; =&gt; &#39;gasfp&#39;, &#39;Woodbrn Stove&#39; =&gt; &#39;woodbrn_stove&#39;, &#39;Assigned To&#39; =&gt; &#39;assigned_user_id&#39;);

    // Make the field link to detail view from list view (Fieldname)
    var $list_link_field = &#39;chimneyname&#39;;

    // For Popup listview and UI type support
    var $search_fields = Array(

    /* Format: Field Label =&gt; Array(tablename, columnname) */

    // tablename should not have prefix &#39;vtiger_&#39;
    &#39;CustomModule Name&#39; =&gt; Array(&#39;chimney&#39;, &#39;chimneyname&#39;), &#39;Woodburning FP&#39; =&gt; Array(&#39;chimney&#39;, &#39;woodburning&#39;), &#39;Gas FP&#39; =&gt; Array(&#39;chimney&#39;, &#39;gasfp&#39;), &#39;Woodbrn Stove&#39; =&gt; Array(&#39;chimney&#39;, &#39;woodbrn_stove&#39;));
    var $search_fields_name = Array(

    /* Format: Field Label =&gt; fieldname */
    &#39;CustomModule Name&#39; =&gt; &#39;chimneyname&#39;, &#39;Woodburning FP&#39; =&gt; &#39;woodburning&#39;, &#39;Gas FP&#39; =&gt; &#39;gasfp&#39;, &#39;Woodbrn Stove&#39; =&gt; &#39;woodbrn_stove&#39;,);

    // For Popup window record selection
    var $popup_fields = Array(&#39;chimneyname&#39;);

    // Placeholder for sort fields - All the fields will be initialized for Sorting through initSortFields
    var $sortby_fields = Array();

    // For Alphabetical search
    var $def_basicsearch_col = &#39;chimneyname&#39;;

    // Column value to use on detail view record text display
    var $def_detailview_recname = &#39;chimneyname&#39;;

    // Required Information for enabling Import feature
    var $required_fields = Array(&#39;chimneyname&#39; =&gt; 1);

    // Callback function list during Importing
    var $special_functions = Array(&#39;set_import_assigned_user&#39;);

    var $default_order_by = &#39;chimneyname&#39;;
    var $default_sort_order = &#39;ASC&#39;;

    // Used when enabling/disabling the mandatory fields for the module.
    // Refers to vtiger_field.fieldname values.
    var $mandatory_fields = Array(&#39;createdtime&#39;, &#39;modifiedtime&#39;, &#39;chimneyname&#39;);

    function __construct() {
        global $log, $currentModule;
        $this-&gt;column_fields = getColumnFields($currentModule);
        $this-&gt;db = PearDatabase::getInstance();
        $this-&gt;log = $log;
    }

    function getSortOrder() {
        global $currentModule;

        $sortorder = $this-&gt;default_sort_order;
        if ($_REQUEST[&#39;sorder&#39;]) $sortorder = $this-&gt;db-&gt;sql_escape_string($_REQUEST[&#39;sorder&#39;]);
        else if ($_SESSION[$currentModule . &#39;_Sort_Order&#39;]) $sortorder = $_SESSION[$currentModule . &#39;_Sort_Order&#39;];

        return $sortorder;
    }

    function getOrderBy() {
        global $currentModule;

        $use_default_order_by = &#39;&#39;;
        if (PerformancePrefs::getBoolean(&#39;LISTVIEW_DEFAULT_SORTING&#39;, true)) {
            $use_default_order_by = $this-&gt;default_order_by;
        }

        $orderby = $use_default_order_by;
        if ($_REQUEST[&#39;order_by&#39;]) $orderby = $this-&gt;db-&gt;sql_escape_string($_REQUEST[&#39;order_by&#39;]);
        else if ($_SESSION[$currentModule . &#39;_Order_By&#39;]) $orderby = $_SESSION[$currentModule . &#39;_Order_By&#39;];
        return $orderby;
    }

    function save_module($module) {
        //21112#21139
        global $site_URL, $adb;
        //21427

        //if we have frozen the data by checking the field (analysis finalized) we do not want to run any analysis.

        if($this-&gt;column_fields[&#39;cf_1183&#39;] != &quot;on&quot; &amp;&amp; $this-&gt;column_fields[&#39;cf_1183&#39;] != &quot;1&quot;){

            $res = $adb-&gt;pquery(&quot;SELECT a.cf_929, cf_922, cf_925 FROM vtiger_assetscf a
                INNER JOIN vtiger_chimney c ON c.assetsid = a.assetsid
                WHERE c.chimneyid = ?&quot;, array($this-&gt;id));
            if ($adb-&gt;num_rows($res) &gt; 0) {
                $fluid_type = $adb-&gt;query_result($res, 0, &#39;cf_929&#39;);
                $equipment_type = $adb-&gt;query_result($res, 0, &#39;cf_922&#39;);
                $primary_voltage = trim($adb-&gt;query_result($res, 0, &#39;cf_925&#39;));
            }
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

            //samples initialization
            $adb-&gt;query(&#39;UPDATE vtiger_chimneycf SET cf_1096 = null, cf_1095 = &quot;&quot;, cf_1105 = &quot;&quot;,cf_1106=&quot;&quot;, cf_1097 = &quot;&quot;, cf_1112 = &quot;&quot;,  cf_1116 = null,  cf_1119 = &quot;&quot;, cf_1111 = &quot;&quot;, cf_1119 = &quot;&quot;, cf_1174 = &quot;&quot;, cf_saturation = &quot;&quot; WHERE chimneyid = &#39; . $this-&gt;id);

            if (in_array($fluid_type, array(&quot;Mineral Oil&quot;, &quot;Natural Ester&quot;, &quot;R-Temp&quot;, &quot;Silicone&quot;)) &amp;&amp; $primary_voltage != &quot;&quot;) {

                $co2_co = null;
                $c2h4_c2h2 = null;
                $TDHGOverAcetylene = null;
                $TDHG = null;

                if ($this-&gt;column_fields[&#39;cf_946&#39;] == &quot;on&quot; &amp;&amp; ($fluid_type == &quot;Mineral Oil&quot; || $fluid_type == &quot;Natural Ester&quot;)) {

                    if (in_array($equipment_type, array(&#39;Transformer&#39;, &#39;Network Transformer&#39;, &#39;Furnace Transformer&#39;, &#39;Current or Potential Transformer&#39;, &#39;Voltage Regulator&#39;, &#39;Rectifier/Precipitator&#39;))) {
                        
                        $TDCG = floatval($this-&gt;column_fields[&#39;cf_1042&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1043&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1044&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1045&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1046&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1047&#39;]);

                        $adb-&gt;query(&quot;UPDATE vtiger_chimneycf SET cf_1094 = $TDCG WHERE chimneyid = &quot; . $this-&gt;id);
                        
                        curl_setopt($ch, CURLOPT_URL, $site_URL . &#39;/modules/Chimney/DGAAnalysis.php?sample_id=&#39; . $this-&gt;id);
                                                
                        $res = curl_exec($ch);
                        if($this-&gt;column_fields[&#39;cf_1048&#39;] != &#39;&#39; &amp;&amp; $this-&gt;column_fields[&#39;cf_1047&#39;] != &#39;&#39;) {
                            $co2_co = floatval($this-&gt;column_fields[&#39;cf_1048&#39;]) / floatval($this-&gt;column_fields[&#39;cf_1047&#39;]);
                        }
                    } elseif ((strpos($equipment_type, &quot;LTC&quot;) !== false || strpos($equipment_type, &quot;Oil Circuit Breaker&quot;) !== false)) {
                        $adb-&gt;query(&#39;UPDATE vtiger_chimneycf SET cf_1094= null WHERE chimneyid = &#39; . $this-&gt;id);
                        if($this-&gt;column_fields[&#39;cf_1043&#39;] != &#39;&#39; || $this-&gt;column_fields[&#39;cf_1044&#39;] != &#39;&#39; || $this-&gt;column_fields[&#39;cf_1045&#39;] != &#39;&#39;) {
                            $TDHG = floatval($this-&gt;column_fields[&#39;cf_1043&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1044&#39;]) + floatval($this-&gt;column_fields[&#39;cf_1045&#39;]);
                        }
                        if($this-&gt;column_fields[&#39;cf_1046&#39;] != &#39;&#39;) {
                            $TDHGOverAcetylene = $TDHG / floatval($this-&gt;column_fields[&#39;cf_1046&#39;]);
                        }
                        if($this-&gt;column_fields[&#39;cf_1046&#39;] != &#39;&#39; &amp;&amp; $this-&gt;column_fields[&#39;cf_1045&#39;] != &#39;&#39;) {
                            $c2h4_c2h2 = floatval($this-&gt;column_fields[&#39;cf_1045&#39;]) / floatval($this-&gt;column_fields[&#39;cf_1046&#39;]);
                        }
                    }
                }
                $adb-&gt;pquery(&#39;UPDATE vtiger_chimneycf SET cf_1116 = ?, cf_1180 = ?, cf_1114 = ?, cf_1115 = ? WHERE chimneyid = ?&#39;, array($TDHG, $TDHGOverAcetylene, $co2_co, $c2h4_c2h2, $this-&gt;id));

                if (($this-&gt;column_fields[&#39;cf_961&#39;] == &#39;on&#39; || $this-&gt;column_fields[&#39;cf_964&#39;] == &#39;on&#39; || $this-&gt;column_fields[&#39;cf_957&#39;] == &#39;on&#39;) &amp;&amp; $fluid_type != &#39;&#39;) {
                    $this-&gt;point_logic($fluid_type);
                }

                //endf

                //21300
                // calculate saturation and update value
                // we only wan to run this logic when the moisture test is ordered.

                //21324
                // append dga analysis
                if ($fluid_type != &#39;Natural Ester&#39;) {
                    if ($this-&gt;column_fields[&#39;cf_1047&#39;] &gt; 500 &amp;&amp; $this-&gt;column_fields[&#39;cf_1048&#39;] &gt; 5000 &amp;&amp; ($this-&gt;column_fields[&#39;cf_1114&#39;] &lt; 3.0 || $this-&gt;column_fields[&#39;cf_1114&#39;] &gt; 7.0)) {
                        $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1111 = CONCAT(cf_1111, &#39;&#39;, &#39;CO2/CO ratio indicates excessive overheating and or accelerated aging of cellulose insulation.\n&#39;) WHERE chimneyid = ?&quot;, array($this-&gt;id));
                    }
                }
                //21492 - corrosive sulfur test
                if ($this-&gt;column_fields[&#39;cf_959&#39;] == &#39;on&#39; &amp;&amp; strtolower(trim($this-&gt;column_fields[&#39;cf_1175&#39;])) == &#39;corrosive&#39; &amp;&amp; $fluid_type == &#39;Mineral Oil&#39;) { //21527
                    $oq = &quot;The oil did not pass the corrosive sulfur test. Recommend disposing of oil and retrofilling or vacuum filling with new oil. Consider performing internal inspection and or electrical testing.\n&quot;;
                    $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($oq, $this-&gt;id));
                }
                $moisture_statement = false;

                //moisture test needs to be ordered.
                if ($this-&gt;column_fields[&#39;cf_951&#39;] == &#39;on&#39;) $moisture_statement = $this-&gt;updateWaterInOIlSaturationFieldCreation($fluid_type, $equipment_type, $primary_voltage);
                //21472 - Set OIl Classification for Transformers

                #21472 - Set OIl Classification for Transformers
                $this-&gt;setOilClassification($fluid_type, $equipment_type, $primary_voltage, $moisture_statement);

                //set oil classication for OCB samples.
                $this-&gt;setOilQualityMessageForOCBSamples($fluid_type, $equipment_type, $primary_voltage, $moisture_statement);

                //set oil classication for LTC samples.
                $this-&gt;setOilQualityMessageForLTCSamples($fluid_type, $equipment_type, $primary_voltage, $moisture_statement);

                //set oil classification message for natural ester samples
                $this-&gt;setOilQualityMessageForNaturalEsterSamples($fluid_type, $primary_voltage);

                //degree of poly logic
                $this-&gt;degree_of_poly($fluid_type, $equipment_type, $primary_voltage);

                //iterate through all tests order and see if the status is correctly set and the value is set.

                //21514
                if ($this-&gt;column_fields[&#39;cf_953&#39;] == &#39;on&#39;) {
                    curl_setopt($ch, CURLOPT_URL, $site_URL . &#39;/modules/Chimney/MetalsInOilLogic.php?sample_id=&#39; . $this-&gt;id);
                    $res = curl_exec($ch);
                }
                //21515
                if ($this-&gt;column_fields[&#39;cf_956&#39;] == &#39;on&#39;) {
                    curl_setopt($ch, CURLOPT_URL, $site_URL . &#39;/modules/Chimney/PCBLogic.php?sample_id=&#39; . $this-&gt;id);
                    $res = curl_exec($ch);
                }
                //21516
                if ($this-&gt;column_fields[&#39;cf_955&#39;] == &#39;on&#39;) {
                    curl_setopt($ch, CURLOPT_URL, $site_URL . &#39;/modules/Chimney/OxidationInhibitorLogic.php?sample_id=&#39; . $this-&gt;id);
                    $res = curl_exec($ch);
                }
                //21513
                if ($this-&gt;column_fields[&#39;cf_958&#39;] == &#39;on&#39;) {
                    curl_setopt($ch, CURLOPT_URL, $site_URL . &#39;/modules/Chimney/ParticleLogic.php?sample_id=&#39; . $this-&gt;id);
                    $res = curl_exec($ch);
                }

                

                curl_close($ch);
            }
	    $this-&gt;set_sample_status();
        }
    }

    function set_sample_status() {
        global $adb;
	if(strtolower($this-&gt;column_fields[&quot;cf_1089&quot;]) != &quot;results released&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1163&quot;]!=&quot;&quot;) {
		//$test_groups = array(&#39;cf_941&#39; =&gt; array(&#39;cf_965&#39; =&gt; array(&#39;cf_1013&#39;)), &#39;cf_942&#39; =&gt; array(&#39;cf_966&#39; =&gt; array(&#39;cf_1014&#39;)), &#39;cf_945&#39; =&gt; array(&#39;cf_969&#39; =&gt; array(&#39;cf_1017&#39;)), &#39;cf_947&#39; =&gt; array(&#39;cf_971&#39; =&gt; array(&#39;cf_1018&#39;, &#39;cf_1019&#39;, &#39;cf_1020&#39;)), &#39;cf_950&#39; =&gt; array(&#39;cf_974&#39; =&gt; array(&#39;cf_1021&#39;, &#39;cf_1023&#39;)), &#39;cf_1066&#39; =&gt; array(&#39;cf_1070&#39; =&gt; array(&#39;cf_1026&#39;)), &#39;cf_951&#39; =&gt; array(&#39;cf_975&#39; =&gt; array(&#39;cf_1027&#39;)), &#39;cf_1067&#39; =&gt; array(&#39;cf_1068&#39; =&gt; array(&#39;cf_1028&#39;)), &#39;cf_953&#39; =&gt; array(&#39;cf_977&#39; =&gt; array(&#39;cf_1029&#39;, &#39;cf_1030&#39;, &#39;cf_1031&#39;)), &#39;cf_954&#39; =&gt; array(&#39;cf_978&#39; =&gt; array(&#39;cf_1032&#39;, &#39;cf_1033&#39;, &#39;cf_1034&#39;, &#39;cf_1035&#39;, &#39;cf_1036&#39;)), &#39;cf_955&#39; =&gt; array(&#39;cf_979&#39; =&gt; (&#39;cf_1037&#39;)), &#39;cf_956&#39; =&gt; array(&#39;cf_980&#39; =&gt; array(&#39;cf_1038&#39;)), &#39;cf_957&#39; =&gt; array(&#39;cf_981&#39; =&gt; array(&#39;cf_1039&#39;)), &#39;cf_946&#39; =&gt; array(&#39;cf_970&#39; =&gt; array(&#39;cf_1042&#39;, &#39;cf_1043&#39;, &#39;cf_1044&#39;, &#39;cf_1045&#39;, &#39;cf_1046&#39;, &#39;cf_1047&#39;, &#39;cf_1048&#39;, &#39;cf_1049&#39;, &#39;cf_1050&#39;)), &#39;cf_961&#39; =&gt; array(&#39;cf_985&#39; =&gt; array(&#39;cf_1052&#39;)), &#39;cf_964&#39; =&gt; array(&#39;cf_988&#39; =&gt; array(&#39;cf_1059&#39;)), &#39;cf_1113&#39; =&gt; array(&#39;cf_1144&#39; =&gt; &#39;cf_1136&#39;, &#39;cf_1145&#39; =&gt; &#39;cf_1137&#39;, &#39;cf_1146&#39; =&gt; &#39;cf_1138&#39;, &#39;cf_1147&#39; =&gt; &#39;cf_1139&#39;), &#39;cf_959&#39; =&gt; array(&#39;cf_983&#39; =&gt; array(&#39;cf_1175&#39;)), &#39;cf_958&#39; =&gt; array(&#39;cf_982&#39; =&gt; array(&#39;cf_1040&#39;, &#39;cf_1076&#39;)));
		//Acid
		$test_groups[&#39;cf_941&#39;] = array(&#39;cf_965&#39; =&gt; array(&#39;cf_1013&#39;));
		//IFT
		$test_groups[&#39;cf_942&#39;] = array(&#39;cf_966&#39; =&gt; array(&#39;cf_1014&#39;));
		//Dielectric 1816
		$test_groups[&#39;cf_943&#39;] = array(&#39;cf_967&#39; =&gt; array(&#39;cf_1120&#39;,&#39;cf_1121&#39;));
		//Dielectric 877
		$test_groups[&#39;cf_944&#39;] = array(&#39;cf_968&#39; =&gt; array(&#39;cf_1016&#39;));
		//Specific Gravity
		$test_groups[&#39;cf_945&#39;] = array(&#39;cf_969&#39; =&gt; array(&#39;cf_1017&#39;));
		//DGA
		$test_groups[&#39;cf_946&#39;] = array(&#39;cf_970&#39; =&gt; array(&#39;cf_1042&#39;, &#39;cf_1043&#39;, &#39;cf_1044&#39;, &#39;cf_1045&#39;, &#39;cf_1046&#39;, &#39;cf_1047&#39;, &#39;cf_1048&#39;, &#39;cf_1049&#39;, &#39;cf_1050&#39;));
		//Viscocity
		$test_groups[&#39;cf_947&#39;] = array(&#39;cf_971&#39; =&gt; array(&#39;cf_1018&#39;, &#39;cf_1019&#39;, &#39;cf_1020&#39;));
		//Color / Visual
		$test_groups[&#39;cf_950&#39;] = array(&#39;cf_974&#39; =&gt; array(&#39;cf_1021&#39;, &#39;cf_1023&#39;));
		//Moisture
		$test_groups[&#39;cf_951&#39;] = array(&#39;cf_975&#39; =&gt; array(&#39;cf_1027&#39;));
		//Metals In Oil
		$test_groups[&#39;cf_953&#39;] = array(&#39;cf_977&#39; =&gt; array(&#39;cf_1029&#39;, &#39;cf_1030&#39;, &#39;cf_1031&#39;));
		//Furans
		$test_groups[&#39;cf_954&#39;] = array(&#39;cf_978&#39; =&gt; array(&#39;cf_1032&#39;, &#39;cf_1033&#39;, &#39;cf_1034&#39;, &#39;cf_1035&#39;, &#39;cf_1036&#39;));
		//Oxidation Inhibitor
		$test_groups[&#39;cf_955&#39;] = array(&#39;cf_979&#39; =&gt; (&#39;cf_1037&#39;));
		//PCB
		$test_groups[&#39;cf_956&#39;] = array(&#39;cf_980&#39; =&gt; array(&#39;cf_1038&#39;));
		//Flash Point
		$test_groups[&#39;cf_957&#39;] = array(&#39;cf_981&#39; =&gt; array(&#39;cf_1039&#39;));
		//Particle Count
		$test_groups[&#39;cf_958&#39;] = array(&#39;cf_982&#39; =&gt; array(&#39;cf_1040&#39;, &#39;cf_1176&#39;));
		//Corrosive Sulfer
		$test_groups[&#39;cf_959&#39;] = array(&#39;cf_983&#39; =&gt; array(&#39;cf_1175&#39;));
		//Pour Point
		$test_groups[&#39;cf_961&#39;] = array(&#39;cf_985&#39; =&gt; array(&#39;cf_1052&#39;));
		//Fire Point
		$test_groups[&#39;cf_964&#39;] = array(&#39;cf_988&#39; =&gt; array(&#39;cf_1059&#39;));
		//Power Factor 25C
		$test_groups[&#39;cf_1066&#39;] = array(&#39;cf_1070&#39; =&gt; array(&#39;cf_1026&#39;));
		//Power Factor 100C
		$test_groups[&#39;cf_1067&#39;] = array(&#39;cf_1068&#39; =&gt; array(&#39;cf_1028&#39;));
		//Other
		$test_groups[&#39;cf_1113&#39;] = array(&#39;cf_1144&#39; =&gt; array(&#39;cf_1136&#39;), &#39;cf_1145&#39; =&gt; array(&#39;cf_1137&#39;), &#39;cf_1146&#39; =&gt; array(&#39;cf_1138&#39;), &#39;cf_1147&#39; =&gt; array(&#39;cf_1139&#39;));
		
		
		//$test_groups[TEST_ORDERED][TEST_STATUS][TEST_VALUE]
		
		$all_tests_complete = true;
		$debug_echo = false;
		foreach ($test_groups as $test_ordered =&gt; $tests) {
			if ($this-&gt;column_fields[$test_ordered] == &#39;on&#39; || $this-&gt;column_fields[$test_ordered] == 1) {
				if($test_ordered == &quot;cf_946&quot;) {
					$debug_echo = true;
				}
				foreach ($tests as $test_status =&gt; $test_values) {
					if ($this-&gt;column_fields[$test_status] != &#39;Completed&#39; &amp;&amp; $this-&gt;column_fields[$test_status] != &#39;N/A&#39;) {#21541
						$all_tests_complete = false;
						break;
					}/* else {
						if ($this-&gt;column_fields[$test_status] != &#39;N/A&#39;) {
							foreach ($test_values as $value) {
								if ($this-&gt;column_fields[$value] == &#39;&#39;) {
									$all_tests_complete = false;
									break;
								}
							}
						}
					}*/
				}
			}
			if (!$all_tests_complete) break;
		}
		if ($all_tests_complete) {
		    $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1089 = ? WHERE chimneyid = ?&quot;, array(&#39;All Tests Are Complete&#39;, $this-&gt;id));
		} else {

		    $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1089 = ? WHERE chimneyid = ?&quot;, array(&#39;In Progress&#39;, $this-&gt;id));
		}
	}
    }

    function updateWaterInOIlSaturationFieldCreation($fluid_type, $equipment_type, $primary_voltage) {
        global $adb;

        if ($primary_voltage != &#39;&#39; &amp;&amp; $fluid_type == &#39;Mineral Oil&#39; &amp;&amp; in_array($equipment_type, array(&#39;Transformer&#39;, &#39;Network Transformer&#39;, &#39;Furnace Transformer&#39;, &#39;Current or Potential Transformer&#39;, &#39;Voltage Regulator&#39;, &#39;Rectifier/Precipitator&#39;))) {

            // update oil quality
            if ($this-&gt;column_fields != &#39;&#39; &amp;&amp; $this-&gt;column_fields[&#39;cf_1107&#39;] &gt;= 20 &amp;&amp; $this-&gt;column_fields[&#39;cf_1107&#39;] &lt;= 90) {

                //calculate saturation percent
                $sowimo = (24.945114 + (0.212258 * $this-&gt;column_fields[&#39;cf_1107&#39;])) + (0.052695849 * $this-&gt;column_fields[&#39;cf_1107&#39;] * $this-&gt;column_fields[&#39;cf_1107&#39;]);
                $saturation = 100 * ($this-&gt;column_fields[&#39;cf_1027&#39;] / $sowimo);

                $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_saturation = ? WHERE chimneyid = ?&quot;, array($saturation, $this-&gt;id));

                $primary_voltage = floatval($primary_voltage);
                $mtr = floatval($this-&gt;column_fields[&#39;cf_1027&#39;]);
                $oil_quality = &quot;&quot;;
                if (trim($primary_voltage) != &#39;&#39; &amp;&amp; $primary_voltage &lt;= 69 &amp;&amp; $mtr &lt; 35) {
                    if ($saturation &gt;= 0 &amp;&amp; $saturation &lt; 6) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 and Percent Saturation indicates the cellulose insulation is dry.\n&quot;;
                    } elseif ($saturation &lt;= 20) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 and Percent Saturation indicates the cellulose is moderate to wet.  Retest 3 - 6 months to monitor.\n&quot;;
                    } elseif ($saturation &lt;= 30) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 but Percent Saturation indicates the cellulose insulation is  wet.  Evaluate equilibrium conditions and retest within 3 months to monitor.\n&quot;;
                    } else {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 but Percent Saturation indicates the cellulose insulation  is extremely wet.  Evaluate equilibrium conditions and retest to verify results.\n&quot;;
                    }
                } elseif (trim($primary_voltage) != &#39;&#39; &amp;&amp; $primary_voltage &lt;= 69 &amp;&amp; $mtr &gt; 35) {
                    if ($saturation &gt;= 0 &amp;&amp; $saturation &lt; 6) {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 but Percent Saturation indicates the cellulose insulation is dry. Evaluate equilibrium conditions and retest to verify results.\n&quot;;
                    } elseif ($saturation &lt;= 20) {
                        $oil_quality = &quot;Moisture level  exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is moderate to wet.  May want to consider taking action to dry cellulose insulation and recondition the oil.\n&quot;;
                    } elseif ($saturation &lt;= 30) {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is wet.  Recommend taking action to dry cellulose insulation and recondition the oil.\n&quot;;
                    } else {
                        $oil_quality = &quot;Moisture level  exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is extremely wet.  Recommend taking an outage to dry cellulose insulation and recondition the oil.\n&quot;;
                    }
                } elseif ($primary_voltage &gt; 69 &amp;&amp; $primary_voltage &lt; 230 &amp;&amp; $mtr &lt; 25) {
                    if ($saturation &gt;= 0 &amp;&amp; $saturation &lt; 6) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 and Percent Saturation indicates the cellulose insulation is dry.\n&quot;;
                    } elseif ($saturation &lt;= 20) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 and Percent Saturation indicates the cellulose insulation is moderate to wet.  Retest 3 - 6 months to monitor.\n&quot;;
                    } elseif ($saturation &lt;= 30) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 but Percent Saturation indicates the cellulose insulation is wet. Evaluate equilibrium conditions and retest within 3 months to monitor.\n&quot;;
                    } else {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 but Percent Saturation indicates the cellulose insulation is extremely wet.  Evaluate equilibrium conditions and retest to verify results.\n&quot;;
                    }
                } elseif ($primary_voltage &gt; 69 &amp;&amp; $primary_voltage &lt; 230 &amp;&amp; $mtr &gt; 25) {
                    if ($saturation &gt;= 0 &amp;&amp; $saturation &lt; 6) {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 but Percent Saturation indicates the cellulose insulation is dry. Evaluate equilibrium conditions and retest to verify results.\n&quot;;
                    } elseif ($saturation &lt;= 20) {
                        $oil_quality = &quot;Moisture level  exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is moderate to wet.  May want to consider taking action to dry cellulose insulation and recondition the oil.\n&quot;;
                    } elseif ($saturation &lt;= 30) {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is wet.  Recommend taking action to dry cellulose insulation and recondition the oil.\n&quot;;
                    } else {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is extremely wet.  Recommend taking an outage to dry cellulose insulation and recondition the oil.\n&quot;;
                    }
                } elseif ($primary_voltage &gt;= 230 &amp;&amp; $mtr &lt; 20) {
                    if ($saturation &gt;= 0 &amp;&amp; $saturation &lt; 6) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 and Percent Saturation indicates the cellulose insulation is dry.\n&quot;;
                    } elseif ($saturation &lt;= 20) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 and Percent Saturation indicates the cellulose insulation is moderate to wet.  Retest 3 - 6 months to monitor.\n&quot;;
                    } elseif ($saturation &lt;= 30) {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 but Percent Saturation indicates the cellulose insulation is  wet.  Evaluate equilibrium conditions and retest within 3 months to monitor.\n&quot;;
                    } else {
                        $oil_quality = &quot;Moisture level acceptable per C57.106-2006 but Percent Saturation indicates the cellulose insulation is extremely wet.  Evaluate equilibrium conditions and retest to verify results.\n&quot;;
                    }
                } elseif ($primary_voltage &gt;= 230 &amp;&amp; $mtr &gt; 20) {
                    if ($saturation &gt;= 0 &amp;&amp; $saturation &lt; 6) {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 but Percent Saturation indicates the cellulose insulation is dry. Evaluate equilibrium conditions and retest to verify results.\n&quot;;
                    } elseif ($saturation &lt;= 20) {
                        $oil_quality = &quot;Moisture level  exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is moderate to wet.  May want to consider taking action to dry cellulose insulation and recondition the oil.\n&quot;;
                    } elseif ($saturation &lt;= 30) {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is wet.  Recommend taking action to dry cellulose insulation and recondition the oil.\n&quot;;
                    } else {
                        $oil_quality = &quot;Moisture level exceeds limit per C57.106-2006 and Percent Saturation indicates the cellulose insulation is extremely wet.  Recommend taking an outage to dry cellulose insulation and recondition the oil.\n&quot;;
                    }
                }
                if ($oil_quality != &#39;&#39;){
                    $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($oil_quality, $this-&gt;id));
                    return true;
                }else{
                    return false;
                }
            }
        }
    }
    function setOilQualityMessageForLTCSamples($fluid_type, $equipment_type, $primary_voltage, $moisture_statement) {
        global $adb;

        if (strpos($equipment_type, &quot;LTC&quot;) !== false &amp;&amp; $primary_voltage != &quot;&quot;) {

            $tests_ordered = array(&#39;acid_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_941&#39;], &#39;ift_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_942&#39;], &#39;dielectric_test&#39; =&gt; array(&#39;dielectric877_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_944&#39;], &#39;dielectric12_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_943&#39;]), &#39;power_factor_tests&#39; =&gt; array(&#39;factor25_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_1066&#39;], &#39;factor100_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_1067&#39;]), &#39;water_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_951&#39;]);
            $dielectric877_test = $this-&gt;column_fields[&#39;cf_944&#39;];
            $dielectric12_test = $this-&gt;column_fields[&#39;cf_943&#39;];
            $factor25_test = $this-&gt;column_fields[&#39;cf_1066&#39;];
            $factor100_test = $this-&gt;column_fields[&#39;cf_1067&#39;];
            $dielectric_test = $this-&gt;column_fields[&#39;cf_943&#39;];
            $dielectric877_test = trim($this-&gt;column_fields[&#39;cf_944&#39;]);
            $acid_test = $this-&gt;column_fields[&#39;cf_941&#39;];
            $ift_test = $this-&gt;column_fields[&#39;cf_942&#39;];
            $factor25_test = $this-&gt;column_fields[&#39;cf_1066&#39;];
            $factor100_test = $this-&gt;column_fields[&#39;cf_1067&#39;];
            $color_visual_test = $this-&gt;column_fields[&#39;cf_950&#39;];
            $water_test = $this-&gt;column_fields[&#39;cf_951&#39;];

            $all_tests_ordered = $this-&gt;tests_ordered($tests_ordered);

            //test result values
            $color = trim($this-&gt;column_fields[&#39;cf_1023&#39;]);
            $visual = trim($this-&gt;column_fields[&#39;cf_1021&#39;]);
            $dielectric1 = trim($this-&gt;column_fields[&#39;cf_1120&#39;]);
            $dielectric2 = trim($this-&gt;column_fields[&#39;cf_1121&#39;]);
            $dielectric877 = trim($this-&gt;column_fields[&#39;cf_1016&#39;]);
            $water = trim($this-&gt;column_fields[&#39;cf_1027&#39;]);
            $factor25 = trim($this-&gt;column_fields[&#39;cf_1026&#39;]);
            $factor100 = trim($this-&gt;column_fields[&#39;cf_1028&#39;]);
            $ift = trim($this-&gt;column_fields[&#39;cf_1014&#39;]);
            $acid = trim($this-&gt;column_fields[&#39;cf_1013&#39;]);
            $all_tests_ordered_two = ($all_tests_ordered &amp;&amp; ($dielectric1 != &#39;&#39; || $dielectric2 != &#39;&#39; || $dielectric877 != &#39;&#39;) &amp;&amp; ($factor25 != &#39;&#39; || $factor100 != &#39;&#39;) &amp;&amp; $ift != &#39;&#39; &amp;&amp; $acid != &#39;&#39; &amp;&amp; $primary_voltage != &#39;&#39;);
            if ($fluid_type == &#39;Mineral Oil&#39;) {

                //UPDATE THE OIL QUALITY MESSAGE
                $statement = &#39;&#39;;
                $reclaiming = false;
                $extra_standard = false;
                $statuses = array(
                    &quot;the C57.106-2006 maximum standard&quot; =&gt; array(),
                    &quot;did not meet the C57.106-2006 minimum standard&quot; =&gt; array()
                );

                // primary voltage independent tests.
                if (($factor25_test == &quot;on&quot; &amp;&amp; $factor25 &gt; 0.5) || ($factor100_test == &quot;on&quot; &amp;&amp; $factor100 &gt; 5)){
                    array_push($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;], &quot;power factor&quot;);
                    $reclaiming = true;
                }
                if ($acid_test &amp;&amp; $acid &gt; 0.2){
                    array_push($statuses[&quot;the C57.106-2006 maximum standard&quot;], &quot;acid&quot;);
                    $reclaiming = true;
                }
                if($dielectric877_test == &quot;on&quot; &amp;&amp; $dielectric877 != &quot;&quot; &amp;&amp; $dielectric877 &lt; 26){
                        $statement .= &quot;The dielectric test did not meet the C57.106-1991 minimum standard for in-service load tap changers.\n&quot;;
                        $extra_standard = true;
                }   

                if ($primary_voltage &lt;= 69) {
                    if (($dielectric12_test == &quot;on&quot; &amp;&amp; ($dielectric1 != &quot;&quot; &amp;&amp; $dielectric1 &lt; 25) || ($dielectric2 != &quot;&quot;  &amp;&amp; $dielectric2 &lt; 35)))
                        array_push($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;], &quot;dielectric&quot;);
                    if ($ift_test == &quot;on&quot; &amp;&amp; $ift &lt; 24){
                        $statement .= &quot;The IFT test did not meet the IEEE 637-1985 minimum standard for in-service load tap changers.\n&quot;;
                        $reclaiming = true;
                    }
                    if ($water_test &amp;&amp; $water &gt; 30 &amp;&amp; !$moisture_statement)
                        array_push($statuses[&quot;the C57.106-2006 maximum standard&quot;], &quot;water ppm level&quot;);
                }elseif( $primary_voltage &gt; 69 ){
                    if ($dielectric12_test == &quot;on&quot; &amp;&amp; (($dielectric1 != &quot;&quot; &amp;&amp; $dielectric1 &lt; 28) ||  ($dielectric2 != &quot;&quot; &amp;&amp; $dielectric2 &lt; 45)))
                        array_push($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;], &quot;dielectric&quot;);
                    if ($ift_test &amp;&amp; $ift &lt; 26){
                        $statement .= &quot;The IFT test did not meet the IEEE 637-1985 minimum standard for in-service load tap changers.\n&quot;;
                        $reclaiming = true;
                    }
                    if ($water_test &amp;&amp; $water &gt; 25 &amp;&amp; !$moisture_statement)
                        array_push($statuses[&quot;the C57.106-2006 maximum standard&quot;], &quot;water ppm level&quot;);
                }
                // loop through all of the listable statements.

                // TODO combine both statements into one statement because they are of the same standard.

                // if both are present we want to combine it into one statement.
                if( count($statuses[&quot;the C57.106-2006 maximum standard&quot;]) &gt; 0 &amp;&amp; count($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;]) &gt; 0){
                    $statement .= &quot;The &quot; . $this-&gt;_get_listing($statuses[&quot;the C57.106-2006 maximum standard&quot;]) . 
                        (count($statuses[&quot;the C57.106-2006 maximum standard&quot;]) == 1 ? &quot; test exceeds &quot;:&quot; tests exceed &quot;) . &quot;the maximum and the &quot; .
                        $this-&gt;_get_listing($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;]) .
                        (count($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;]) == 1 ? &quot; test &quot;:&quot; tests &quot;) . &quot;did not meet the minimum for the C57.106-2006 standard for in-service load tap chargers.\n&quot;;
                }
                else{
                    foreach($statuses as $status =&gt; $tests_ar){
                        if(count($tests_ar) &gt; 0){
                            
                            $standard_2006 = array();

                            if($status == &quot;the C57.106-2006 maximum standard&quot;)
                                $statement .= &quot;The &quot; . $this-&gt;_get_listing($tests_ar) . (count($tests_ar) == 1 ? &quot; test exceeds &quot;:&quot; tests exceed &quot;) . $status . &quot; for in-service load tap chargers.\n&quot;;

                            elseif($status == &quot;did not meet the C57.106-2006 minimum standard&quot;)
                                $statement .= &quot;The &quot; . $this-&gt;_get_listing($tests_ar) . (count($tests_ar) == 1 ? &quot; test &quot;:&quot; tests &quot;) . $status . &quot; for in-service load tap chargers.\n&quot;;
                        }
                    }
                }

                if($statement == &#39;&#39; &amp;&amp; $all_tests_ordered_two &amp;&amp; !$moisture_statement)
                    $statement .= &quot;All tests meet the C57.106-2006&quot;.($extra_standard ? &quot;, C57.106-1991,&quot;:&quot;&quot;).&quot; and IEEE 637-1985 minimum requirements. Oil is considered to be acceptable for continued service in a load tap changer.\n&quot;;
                elseif($statement != &#39;&#39;)
                    $statement .= &quot;Recommend &quot;.($reclaiming ? &quot;reclaiming&quot;:&quot;reconditioning&quot;).&quot; the oil.\n&quot;; 
                
                if($statement != &quot;&quot;)
                    $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($statement, $this-&gt;id));
            }
        }
    }
    function setOilQualityMessageForOCBSamples($fluid_type, $equipment_type, $primary_voltage, $moisture_statement) {
        global $adb;

        if ($equipment_type == &#39;Oil Circuit Breaker&#39; &amp;&amp; $fluid_type == &#39;Mineral Oil&#39; &amp;&amp; $primary_voltage != &#39;&#39;) {

            //tests ordered
            $dielectric_test = $this-&gt;column_fields[&#39;cf_943&#39;];
            $dielectric877_test = trim($this-&gt;column_fields[&#39;cf_944&#39;]);
            $acid_test = $this-&gt;column_fields[&#39;cf_941&#39;];
            $ift_test = $this-&gt;column_fields[&#39;cf_942&#39;];
            $factor25_test = $this-&gt;column_fields[&#39;cf_1066&#39;];
            $factor100_test = $this-&gt;column_fields[&#39;cf_1067&#39;];
            $color_visual_test = $this-&gt;column_fields[&#39;cf_950&#39;];
            $water_test = $this-&gt;column_fields[&#39;cf_951&#39;];

            //test result values
            $color = trim($this-&gt;column_fields[&#39;cf_1023&#39;]);
            $visual = trim($this-&gt;column_fields[&#39;cf_1021&#39;]);
            $dielectric1 = trim($this-&gt;column_fields[&#39;cf_1120&#39;]);
            $dielectric2 = trim($this-&gt;column_fields[&#39;cf_1121&#39;]);
            $dielectric877 = trim($this-&gt;column_fields[&#39;cf_1016&#39;]);
            $water = trim($this-&gt;column_fields[&#39;cf_1027&#39;]);
            $factor25 = trim($this-&gt;column_fields[&#39;cf_1026&#39;]);
            $factor100 = trim($this-&gt;column_fields[&#39;cf_1028&#39;]);
            $ift = trim($this-&gt;column_fields[&#39;cf_1014&#39;]);
            $acid = trim($this-&gt;column_fields[&#39;cf_1013&#39;]);

            $statement = &quot;&quot;;

            $statuses = array(
                &quot;did not meet the C57.106-1991 minimum standard&quot; =&gt; array(), 
                &quot;exceeds the C57.106-2006 maximum standard&quot; =&gt; array(),
                &quot;did not meet the C57.106-2006 minimum standard&quot; =&gt; array(),
                &quot;did not the meet IEEE 637-1985 minimum standard&quot; =&gt; array(),
                &quot;other&quot; =&gt; array()
            );
            $reclaiming = false;


            if (($dielectric_test == &#39;on&#39; &amp;&amp; $dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &lt; 20) || ($dielectric_test == &#39;on&#39; &amp;&amp; $dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &lt; 27))
                array_push($statuses[&quot;did not meet the C57.106-1991 minimum standard&quot;], &quot;dielectric&quot;);
            if ($dielectric877_test == &#39;on&#39; &amp;&amp; $dielectric877 != &#39;&#39; &amp;&amp; $dielectric877 &lt; 25) 
                array_push($statuses[&quot;did not meet the C57.106-1991 minimum standard&quot;], &quot;dielectric&quot;);
            if ($color_visual_test == &#39;on&#39; &amp;&amp; ($visual == &#39;Excessive Carbon&#39; || $visual == &#39;Excess Carbon&#39;))
                array_push($statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;], &quot;visual&quot;);
            if ($factor25_test == &#39;on&#39; &amp;&amp; $factor25 &gt; 1.0){
                array_push($statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;], &quot;power factor&quot;);
                $reclaiming = true;
            }
            if ($color_visual_test == &#39;on&#39; &amp;&amp; $color &gt; 2.0){
                array_push($statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;], &quot;color&quot;);
                $reclaiming = true;
            }
            if ($ift_test == &#39;on&#39; &amp;&amp; $ift &lt; 25){
                array_push($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;], &quot;IFT&quot;);
                $reclaiming = true;
            }
            if ($acid_test == &#39;on&#39; &amp;&amp; $acid &gt; 0.2){
                array_push($statuses[&quot;did not the meet IEEE 637-1985 minimum standard&quot;], &quot;acid&quot;);
                $reclaiming = true;
            }
            if ($water_test == &#39;on&#39; &amp;&amp; $water &gt; 40 &amp;&amp; $moisture_statement == false)
                array_push($statuses[&quot;other&quot;], &quot;moisture level is elevated&quot;);


            if( count($statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;]) &gt; 0 &amp;&amp; count($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;]) &gt; 0){
                $statement .= &quot;The &quot; . $this-&gt;_get_listing($statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;]) . 
                    (count($statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;]) == 1 ? &quot; test exceeds &quot;:&quot; tests exceed &quot;) . &quot;the maximum and the &quot; .
                    $this-&gt;_get_listing($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;]) .
                    (count($statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;]) == 1 ? &quot; test &quot;:&quot; tests &quot;) . &quot;did not meet the minimum for the C57.106-2006 standard for in-service circuit breakers.\n&quot;;
                // resets the array so it does not add it to the statement messsage twice.
                $statuses[&quot;exceeds the C57.106-2006 maximum standard&quot;] = array();
                $statuses[&quot;did not meet the C57.106-2006 minimum standard&quot;] = array();
            }

            foreach($statuses as $status =&gt; $tests_ar){
                if($status == &quot;exceeds the C57.106-2006 maximum standard&quot; &amp;&amp; count($tests_ar) &gt; 0)
                    $statement .= &quot;The &quot; .  $this-&gt;_get_listing($tests_ar) . (count($tests_ar) &gt; 1 ? &quot; tests exceed&quot; : &quot; test exceeds&quot;) . &quot; the C57.106-2006 maximum standard for in-service circuit breakers.\n&quot;;
                elseif($status != &quot;other&quot; &amp;&amp; count($tests_ar) &gt; 0){
                    $statement .= &quot;The &quot; . $this-&gt;_get_listing($tests_ar) . (count($tests_ar) &gt; 1 ? &quot; tests &quot; : &quot; test &quot;) . $status . &quot; for in-service circuit breakers.\n&quot;;
                }
                elseif($status == &quot;other&quot; &amp;&amp; count($tests_ar) &gt; 0)
                    $statement .= &quot;The moisture level is elevated, which may result in poor fluid quality.\n&quot;;
            }

            if($statement != &quot;&quot;){
                $statement .= &quot;Recommend &quot; . ($reclaiming ? &quot;reclaiming&quot; : &quot;reconditioning&quot;) . &quot; the fluid.\n&quot;;
            }
            if (($dielectric_test == &#39;on&#39; || $dielectric877_test == &#39;on&#39;) &amp;&amp; $acid_test == &#39;on&#39; &amp;&amp; $ift_test == &#39;on&#39; &amp;&amp; $color_visual_test == &#39;on&#39; &amp;&amp; $factor25_test == &#39;on&#39; 
                &amp;&amp; ($dielectric1 != &#39;&#39; || $dielectric2 != &#39;&#39; || $dielectric877 != &#39;&#39;) 
                &amp;&amp; ($factor25 != &#39;&#39; || $factor100 != &#39;&#39;) &amp;&amp; $ift != &#39;&#39; &amp;&amp; $acid != &#39;&#39; &amp;&amp; $moisture_statement == false &amp;&amp; $statement == &quot;&quot;) {
                
                $statement .= &quot;All tests met C57.106-2006 minimum requirements and oil is considered acceptable for continued service in a circuit breaker.\n&quot;;
            }
            if($statement != &quot;&quot;){
                $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($statement, $this-&gt;id));
            }
        }
    }

    function setOilClassification($fluid_type, $equipment_type, $primary_voltage, $moisture_statement) {
        global $adb;

        if ($fluid_type == &#39;Mineral Oil&#39; &amp;&amp; in_array($equipment_type, array(&#39;Transformer&#39;, &#39;Network Transformer&#39;, &#39;Furnace Transformer&#39;, &#39;Current or Potential Transformer&#39;, &#39;Voltage Regulator&#39;, &#39;Rectifier/Precipitator&#39;))) {
            $tests_ordered = array(&#39;acid_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_941&#39;], &#39;ift_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_942&#39;], &#39;dielectric_tests&#39; =&gt; trim($this-&gt;column_fields[&#39;cf_943&#39;]), &#39;power_factor_tests&#39; =&gt; array(&#39;factor25_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_1066&#39;], &#39;factor100_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_1067&#39;]), &#39;water_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_951&#39;]);
            $all_tests_ordered = $this-&gt;tests_ordered($tests_ordered);

            $dielectric_test = trim($this-&gt;column_fields[&#39;cf_943&#39;]);
            $dielectric877_test = trim($this-&gt;column_fields[&#39;cf_944&#39;]);
            $acid_test = $this-&gt;column_fields[&#39;cf_941&#39;];
            $ift_test = $this-&gt;column_fields[&#39;cf_942&#39;];
            $factor25_test = $this-&gt;column_fields[&#39;cf_1066&#39;];
            $factor100_test = $this-&gt;column_fields[&#39;cf_1067&#39;];
            $color_visual_test = $this-&gt;column_fields[&#39;cf_950&#39;];
            $water_test = $this-&gt;column_fields[&#39;cf_951&#39;];

            $dielectric1 = trim($this-&gt;column_fields[&#39;cf_1120&#39;]);
            $dielectric2 = trim($this-&gt;column_fields[&#39;cf_1121&#39;]);
            $factor25 = trim($this-&gt;column_fields[&#39;cf_1026&#39;]);
            $factor100 = trim($this-&gt;column_fields[&#39;cf_1028&#39;]);
            $ift = trim($this-&gt;column_fields[&#39;cf_1014&#39;]);
            $acid = trim($this-&gt;column_fields[&#39;cf_1013&#39;]);
            $water = trim($this-&gt;column_fields[&#39;cf_1027&#39;]);
            $oil_class = &#39;&#39;;
            $oil_class_hidden = &#39;&#39;;

            //test results
            // ini_set(&#39;display_errors&#39;,1);
            // error_reporting(E_ALL);
            if ($primary_voltage &lt;= 69) {

                //needs to change so that if it passes all tests. Not if it passes one of them.

                //if one is set we run the logic on the one.
                //if both are set we run the logic on both.
                if ((($dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &gt;= 23) || ($dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &gt;= 40)) &amp;&amp; $factor25 &lt;= 0.5 &amp;&amp; $factor100 &lt;= 5.0 &amp;&amp; $ift &gt;= 25 &amp;&amp; $acid &lt;= 0.2 &amp;&amp; $water &lt;= 35) {
                    $oil_class = &#39;Class I&#39;;
                    $oil_class_hidden.= &#39;Class I,&#39;;
                }
                if ((($dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &lt; 23) || ($dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &lt; 40)) || $water &gt; 35) {
                    $oil_class = &#39;Class II&#39;;
                    $oil_class_hidden.= &#39;Class II,&#39;;
                }
                if ((($factor25 != &#39;&#39; &amp;&amp; $factor25 &gt; 0.5) || ($factor100 != &#39;&#39; &amp;&amp; $factor100 &gt; 5.0)) || $ift &lt; 25 || $acid &gt; 0.2) {
                    $oil_class = &#39;Class III&#39;;
                    $oil_class_hidden.= &#39; Class III,&#39;;
                }
                if ($tests_ordered[&#39;ift_test&#39;] &amp;&amp; $ift &lt; 18) {
                    $oil_class = &#39;Class IV&#39;;
                    $oil_class_hidden.= &#39;Class IV,&#39;;
                }

                $s_list_tests = $this-&gt;generateListTests($dielectric1, 23, $dielectric2, 40, $factor25, 0.5, $factor100, 5.0, $ift, 25, $acid, 0.2, $water, 35, $tests_ordered, $moisture_statement);
            } elseif (69 &lt; $primary_voltage &amp;&amp; $primary_voltage &lt; 230) {

                if ((($dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &gt;= 28) || ($dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &gt;= 47)) &amp;&amp; $factor25 &lt;= 0.5 &amp;&amp; $factor100 &lt;= 5.0 &amp;&amp; $ift &gt;= 30 &amp;&amp; $acid &lt;= 0.15 &amp;&amp; $water &lt;= 25) {
                    $oil_class = &#39;Class I&#39;;
                    $oil_class_hidden.= &#39;Class I,&#39;;
                }
                if ((($dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &lt; 28) || ($dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &lt; 47)) || $water &gt; 25) {
                    $oil_class = &#39;Class II&#39;;
                    $oil_class_hidden.= &#39;Class II,&#39;;
                }
                if ((($factor25 != &#39;&#39; &amp;&amp; $factor25 &gt; 0.5) || ($factor100 != &#39;&#39; &amp;&amp; $factor100 &gt; 5.0)) || $ift &lt; 30 || $acid &gt; 0.15) {
                    $oil_class = &#39;Class III&#39;;
                    $oil_class_hidden.= &#39; Class III,&#39;;
                }
                if ($tests_ordered[&#39;ift_test&#39;] &amp;&amp; $ift &lt; 18) {
                    $oil_class = &#39;Class IV&#39;;
                    $oil_class_hidden.= &#39;Class IV,&#39;;
                }
                $s_list_tests = $this-&gt;generateListTests($dielectric1, 28, $dielectric2, 47, $factor25, 0.5, $factor100, 5.0, $ift, 30, $acid, 0.15, $water, 25, $tests_ordered, $moisture_statement);
            } else {
                if ((($dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &gt;= 30) || ($dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &gt;= 50)) &amp;&amp; $factor25 &lt;= 0.5 &amp;&amp; $factor100 &lt;= 5.0 &amp;&amp; $ift &gt;= 32 &amp;&amp; $acid &lt;= 0.1 &amp;&amp; $water &lt;= 20) {
                    $oil_class = &#39;Class I&#39;;
                    $oil_class_hidden.= &#39;Class I,&#39;;
                }
                if ((($dielectric1 != &#39;&#39; &amp;&amp; $dielectric1 &lt; 30) || ($dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &lt; 50)) || $water &gt; 20) {
                    $oil_class = &#39;Class II&#39;;
                    $oil_class_hidden.= &#39;Class II,&#39;;
                }
                if ((($factor25 != &#39;&#39; &amp;&amp; $factor25 &gt; 0.5) || ($factor100 != &#39;&#39; &amp;&amp; $factor100 &gt; 5.0)) || $ift &lt; 32 || $acid &gt; 0.1) {
                    $oil_class = &#39;Class III&#39;;
                    $oil_class_hidden.= &#39; Class III,&#39;;
                }
                if ($tests_ordered[&#39;ift_test&#39;] &amp;&amp; $ift &lt; 18) {
                    $oil_class = &#39;Class IV&#39;;
                    $oil_class_hidden.= &#39;Class IV,&#39;;
                }

                $s_list_tests = $this-&gt;generateListTests($dielectric1, 30, $dielectric2, 50, $factor25, 0.5, $factor100, 5.0, $ift, 32, $acid, 0.1, $water, 20, $tests_ordered, $moisture_statement);
            }

            // update oil class field
            if ($all_tests_ordered) $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1174 = &#39;$oil_class&#39; WHERE chimneyid = ?&quot;, array($this-&gt;id));
            //21549
            $oil_quality = &#39;&#39;;
            $oil_class_hidden = rtrim($oil_class_hidden, &#39;,&#39;);
            $oil_class_hidden = ltrim($oil_class_hidden, &#39; &#39;);

            if (($oil_class_hidden == &#39;Class I&#39; || $s_list_tests == &#39;&#39;) &amp;&amp; $all_tests_ordered) {
                $oil_quality.= &quot;All tests met C57.106-2006 minimum requirements&quot; . ($all_tests_ordered ? &quot; and oil is considered a Class I for continued service.\n&quot; : &quot;.\n&quot;);
            }
            if ($oil_class_hidden == &#39;Class II&#39;) {
                if ($s_list_tests != &#39;&#39;) {
                    $oil_quality.= &quot;$s_list_tests did not meet the C57.106-2006 minimum standard.&quot; . ($all_tests_ordered ? &quot; Oil Is considered a Class II oil and recommend reconditioning the oil.\n&quot; : &quot;\n&quot;);
                }
            }
            if ($oil_class_hidden == &#39;Class III&#39;) {
                if ($s_list_tests != &#39;&#39;) {
                    $oil_quality.= &quot;$s_list_tests did not meet the C57.106-2006 minimum standard.&quot; . ($all_tests_ordered ? &quot; Oil Is considered a Class III oil and recommend reclaiming the oil.\n&quot; : &quot;\n&quot;);
                }
            }
            if ($oil_class_hidden == &#39;Class II, Class III&#39;) {
                if ($s_list_tests != &#39;&#39;) {
                    $oil_quality.= &quot;$s_list_tests did not meet the C57.106-2006 minimum standard.&quot; . ($all_tests_ordered ? &quot; Oil is considered a Class III oil and recommend Hot Oil Reclamation service.\n&quot; : &quot;\n&quot;);
                }
            }
            if ($oil_class == &#39;Class IV&#39;) {
                if ($s_list_tests != &#39;&#39;) {
                    $oil_quality = &quot;IFT value indicates oil is in poor condition and recommend disposing of oil and retrofilling or vacuum filling with new oil.\n&quot;;
                }
            }

            // update Oil Quality field
            if ($oil_quality != &#39;&#39;) {
                $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($oil_quality, $this-&gt;id));
            }
        }
    }

    //Refactor to be a key value array so we can add values later on.
    function generateListTests($dielectric1, $val1, $dielectric2, $val2, $factor25, $val3, $factor100, $val4, $ift, $val5, $acid, $val6, $water, $val7, $tests_ordered, $moisture_statement) { //
        // And we have to check to make sure the test has been ordered.
        $a_list_tests = array();
        if ($tests_ordered[&#39;dielectric_tests&#39;] &amp;&amp; $dielectric1 &lt; $val1 &amp;&amp; $dielectric1 != &#39;&#39;) $a_list_tests[] = &#39;Dielectric 1816 1 mm&#39;;
        if ($tests_ordered[&#39;dielectric_tests&#39;] &amp;&amp; $dielectric2 != &#39;&#39; &amp;&amp; $dielectric2 &lt; $val2) $a_list_tests[] = &#39;Dielectric 1816 2 mm&#39;;
        if ($tests_ordered[&#39;power_factor_tests&#39;][&#39;factor25_test&#39;] &amp;&amp; $factor25 != &#39;&#39; &amp;&amp; $factor25 &gt; $val3) $a_list_tests[] = &#39;Power Factor 25º C&#39;;
        if ($tests_ordered[&#39;power_factor_tests&#39;][&#39;factor100_test&#39;] &amp;&amp; $factor100 != &#39;&#39; &amp;&amp; $factor100 &gt; $val4) $a_list_tests[] = &#39;Power Factor 100º C&#39;;
        if ($tests_ordered[&#39;ift_test&#39;] &amp;&amp; $ift &lt; $val5) $a_list_tests[] = &#39;IFT&#39;;
        if ($tests_ordered[&#39;acid_test&#39;] &amp;&amp; $acid &gt; $val6) $a_list_tests[] = &#39;Acid&#39;;
        if ($tests_ordered[&#39;water_test&#39;] &amp;&amp; $water &gt; $val7 &amp;&amp; !$moisture_statement) $a_list_tests[] = &#39;Moisture&#39;;
        $xx = &#39;&#39;;
        $plural = false;
        if (count($a_list_tests) &gt; 0) {
            for ($i = 0; $i &lt; count($a_list_tests); $i++) {
                if ($i == 0) $xx.= $a_list_tests[$i];
                elseif ($i == count($a_list_tests) - 1) {
                    $xx.= &#39; and &#39; . $a_list_tests[$i];
                    $plural = true;
                } else $xx.= &#39;, &#39; . $a_list_tests[$i];
            }
        } else {
            return &#39;&#39;;
        }

        return $xx . ($plural ? &#39; tests&#39; : &#39; test&#39;);
    }

    /**
     * Return query to use based on given modulename, fieldname
     * Useful to handle specific case handling for Popup
     */
    function getQueryByModuleField($module, $fieldname, $srcrecord, $query = &#39;&#39;) {

        // $srcrecord could be empty

    }

    /**
     * Get list view query (send more WHERE clause condition if required)
     */
    function getListQuery($module, $usewhere = &#39;&#39;) {
        $query = &quot;SELECT vtiger_crmentity.*, $this-&gt;table_name.*&quot;;

        // Keep track of tables joined to avoid duplicates
        $joinedTables = array();

        // Select Custom Field Table Columns if present
        if (!empty($this-&gt;customFieldTable)) $query.= &quot;, &quot; . $this-&gt;customFieldTable[0] . &quot;.* &quot;;

        $query.= &quot; FROM $this-&gt;table_name&quot;;

        $query.= &quot; INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid = $this-&gt;table_name.$this-&gt;table_index&quot;;

        $joinedTables[] = $this-&gt;table_name;
        $joinedTables[] = &#39;vtiger_crmentity&#39;;

        // Consider custom table join as well.
        if (!empty($this-&gt;customFieldTable)) {
            $query.= &quot; INNER JOIN &quot; . $this-&gt;customFieldTable[0] . &quot; ON &quot; . $this-&gt;customFieldTable[0] . &#39;.&#39; . $this-&gt;customFieldTable[1] . &quot; = $this-&gt;table_name.$this-&gt;table_index&quot;;
            $joinedTables[] = $this-&gt;customFieldTable[0];
        }
        $query.= &quot; LEFT JOIN vtiger_users ON vtiger_users.id = vtiger_crmentity.smownerid&quot;;
        $query.= &quot; LEFT JOIN vtiger_groups ON vtiger_groups.groupid = vtiger_crmentity.smownerid&quot;;

        $joinedTables[] = &#39;vtiger_users&#39;;
        $joinedTables[] = &#39;vtiger_groups&#39;;

        $linkedModulesQuery = $this-&gt;db-&gt;pquery(&quot;SELECT distinct fieldname, columnname, relmodule FROM vtiger_field&quot; . &quot; INNER JOIN vtiger_fieldmodulerel ON vtiger_fieldmodulerel.fieldid = vtiger_field.fieldid&quot; . &quot; WHERE uitype=&#39;10&#39; AND vtiger_fieldmodulerel.module=?&quot;, array($module));
        $linkedFieldsCount = $this-&gt;db-&gt;num_rows($linkedModulesQuery);

        for ($i = 0; $i &lt; $linkedFieldsCount; $i++) {
            $related_module = $this-&gt;db-&gt;query_result($linkedModulesQuery, $i, &#39;relmodule&#39;);
            $fieldname = $this-&gt;db-&gt;query_result($linkedModulesQuery, $i, &#39;fieldname&#39;);
            $columnname = $this-&gt;db-&gt;query_result($linkedModulesQuery, $i, &#39;columnname&#39;);

            $other = CRMEntity::getInstance($related_module);
            vtlib_setup_modulevars($related_module, $other);

            if (!in_array($other-&gt;table_name, $joinedTables)) {
                $query.= &quot; LEFT JOIN $other-&gt;table_name ON $other-&gt;table_name.$other-&gt;table_index = $this-&gt;table_name.$columnname&quot;;
                $joinedTables[] = $other-&gt;table_name;
            }
        }

        global $current_user;
        $query.= $this-&gt;getNonAdminAccessControlQuery($module, $current_user);
        $query.= &quot; WHERE vtiger_crmentity.deleted = 0 &quot; . $usewhere;
        return $query;
    }

    /**
     * Apply security restriction (sharing privilege) query part for List view.
     */
    function getListViewSecurityParameter($module) {
        global $current_user;
        require (&#39;user_privileges/user_privileges_&#39; . $current_user-&gt;id . &#39;.php&#39;);
        require (&#39;user_privileges/sharing_privileges_&#39; . $current_user-&gt;id . &#39;.php&#39;);

        $sec_query = &#39;&#39;;
        $tabid = getTabid($module);

        if ($is_admin == false &amp;&amp; $profileGlobalPermission[1] == 1 &amp;&amp; $profileGlobalPermission[2] == 1 &amp;&amp; $defaultOrgSharingPermission[$tabid] == 3) {

            $sec_query.= &quot; AND (vtiger_crmentity.smownerid in($current_user-&gt;id) OR vtiger_crmentity.smownerid IN
                    (
                        SELECT vtiger_user2role.userid FROM vtiger_user2role
                        INNER JOIN vtiger_users ON vtiger_users.id=vtiger_user2role.userid
                        INNER JOIN vtiger_role ON vtiger_role.roleid=vtiger_user2role.roleid
                        WHERE vtiger_role.parentrole LIKE &#39;&quot; . $current_user_parent_role_seq . &quot;::%&#39;
                    )
                    OR vtiger_crmentity.smownerid IN
                    (
                        SELECT shareduserid FROM vtiger_tmp_read_user_sharing_per
                        WHERE userid=&quot; . $current_user-&gt;id . &quot; AND tabid=&quot; . $tabid . &quot;
                    )
                    OR
                        (&quot;;

            // Build the query based on the group association of current user.
            if (sizeof($current_user_groups) &gt; 0) {
                $sec_query.= &quot; vtiger_groups.groupid IN (&quot; . implode(&quot;,&quot;, $current_user_groups) . &quot;) OR &quot;;
            }
            $sec_query.= &quot; vtiger_groups.groupid IN
                        (
                            SELECT vtiger_tmp_read_group_sharing_per.sharedgroupid
                            FROM vtiger_tmp_read_group_sharing_per
                            WHERE userid=&quot; . $current_user-&gt;id . &quot; and tabid=&quot; . $tabid . &quot;
                        )&quot;;
            $sec_query.= &quot;)
                )&quot;;
        }
        return $sec_query;
    }

    /**
     * Create query to export the records.
     */
    function create_export_query($where) {
        global $current_user;
        $thismodule = $_REQUEST[&#39;module&#39;];

        include (&quot;include/utils/ExportUtils.php&quot;);

        //To get the Permitted fields query and the permitted fields list
        $sql = getPermittedFieldsQuery($thismodule, &quot;detail_view&quot;);

        $fields_list = getFieldsListFromQuery($sql);

        $query = &quot;SELECT $fields_list, vtiger_users.user_name AS user_name
                    FROM vtiger_crmentity INNER JOIN $this-&gt;table_name ON vtiger_crmentity.crmid=$this-&gt;table_name.$this-&gt;table_index&quot;;

        if (!empty($this-&gt;customFieldTable)) {
            $query.= &quot; INNER JOIN &quot; . $this-&gt;customFieldTable[0] . &quot; ON &quot; . $this-&gt;customFieldTable[0] . &#39;.&#39; . $this-&gt;customFieldTable[1] . &quot; = $this-&gt;table_name.$this-&gt;table_index&quot;;
        }

        $query.= &quot; LEFT JOIN vtiger_groups ON vtiger_groups.groupid = vtiger_crmentity.smownerid&quot;;
        $query.= &quot; LEFT JOIN vtiger_users ON vtiger_crmentity.smownerid = vtiger_users.id and vtiger_users.status=&#39;Active&#39;&quot;;

        $linkedModulesQuery = $this-&gt;db-&gt;pquery(&quot;SELECT distinct fieldname, columnname, relmodule FROM vtiger_field&quot; . &quot; INNER JOIN vtiger_fieldmodulerel ON vtiger_fieldmodulerel.fieldid = vtiger_field.fieldid&quot; . &quot; WHERE uitype=&#39;10&#39; AND vtiger_fieldmodulerel.module=?&quot;, array($thismodule));
        $linkedFieldsCount = $this-&gt;db-&gt;num_rows($linkedModulesQuery);

        for ($i = 0; $i &lt; $linkedFieldsCount; $i++) {
            $related_module = $this-&gt;db-&gt;query_result($linkedModulesQuery, $i, &#39;relmodule&#39;);
            $fieldname = $this-&gt;db-&gt;query_result($linkedModulesQuery, $i, &#39;fieldname&#39;);
            $columnname = $this-&gt;db-&gt;query_result($linkedModulesQuery, $i, &#39;columnname&#39;);

            $other = CRMEntity::getInstance($related_module);
            vtlib_setup_modulevars($related_module, $other);

            $query.= &quot; LEFT JOIN $other-&gt;table_name ON $other-&gt;table_name.$other-&gt;table_index = $this-&gt;table_name.$columnname&quot;;
        }

        $query.= $this-&gt;getNonAdminAccessControlQuery($thismodule, $current_user);
        $where_auto = &quot; vtiger_crmentity.deleted=0&quot;;

        if ($where != &#39;&#39;) $query.= &quot; WHERE ($where) AND $where_auto&quot;;
        else $query.= &quot; WHERE $where_auto&quot;;

        return $query;
    }

    /**
     * Initialize this instance for importing.
     */
    function initImport($module) {
        $this-&gt;db = PearDatabase::getInstance();
        $this-&gt;initImportableFields($module);
    }

    /**
     * Create list query to be shown at the last step of the import.
     * Called From: modules/Import/UserLastImport.php
     */
    function create_import_query($module) {
        global $current_user;
        $query = &quot;SELECT vtiger_crmentity.crmid, case when (vtiger_users.user_name not like &#39;&#39;) then vtiger_users.user_name else vtiger_groups.groupname end as user_name, $this-&gt;table_name.* FROM $this-&gt;table_name
            INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid = $this-&gt;table_name.$this-&gt;table_index
            LEFT JOIN vtiger_users_last_import ON vtiger_users_last_import.bean_id=vtiger_crmentity.crmid
            LEFT JOIN vtiger_users ON vtiger_users.id = vtiger_crmentity.smownerid
            LEFT JOIN vtiger_groups ON vtiger_groups.groupid = vtiger_crmentity.smownerid
            WHERE vtiger_users_last_import.assigned_user_id=&#39;$current_user-&gt;id&#39;
            AND vtiger_users_last_import.bean_type=&#39;$module&#39;
            AND vtiger_users_last_import.deleted=0&quot;;
        return $query;
    }

    /**
     * Delete the last imported records.
     */
    function undo_import($module, $user_id) {
        global $adb;
        $count = 0;
        $query1 = &quot;select bean_id from vtiger_users_last_import where assigned_user_id=? AND bean_type=&#39;$module&#39; AND deleted=0&quot;;
        $result1 = $adb-&gt;pquery($query1, array($user_id)) or die(&quot;Error getting last import for undo: &quot; . mysql_error());
        while ($row1 = $adb-&gt;fetchByAssoc($result1)) {
            $query2 = &quot;update vtiger_crmentity set deleted=1 where crmid=?&quot;;
            $result2 = $adb-&gt;pquery($query2, array($row1[&#39;bean_id&#39;])) or die(&quot;Error undoing last import: &quot; . mysql_error());
            $count++;
        }
        return $count;
    }

    /**
     * Transform the value while exporting
     */
    function transform_export_value($key, $value) {
        return parent::transform_export_value($key, $value);
    }

    /**
     * Function which will set the assigned user id for import record.
     */
    function set_import_assigned_user() {
        global $current_user, $adb;
        $record_user = $this-&gt;column_fields[&quot;assigned_user_id&quot;];

        if ($record_user != $current_user-&gt;id) {
            $sqlresult = $adb-&gt;pquery(&quot;select id from vtiger_users where id = ? union select groupid as id from vtiger_groups where groupid = ?&quot;, array($record_user, $record_user));
            if ($this-&gt;db-&gt;num_rows($sqlresult) != 1) {
                $this-&gt;column_fields[&quot;assigned_user_id&quot;] = $current_user-&gt;id;
            } else {
                $row = $adb-&gt;fetchByAssoc($sqlresult, -1, false);
                if (isset($row[&#39;id&#39;]) &amp;&amp; $row[&#39;id&#39;] != - 1) {
                    $this-&gt;column_fields[&quot;assigned_user_id&quot;] = $row[&#39;id&#39;];
                } else {
                    $this-&gt;column_fields[&quot;assigned_user_id&quot;] = $current_user-&gt;id;
                }
            }
        }
    }

    /**
     * Function which will give the basic query to find duplicates
     */
    function getDuplicatesQuery($module, $table_cols, $field_values, $ui_type_arr, $select_cols = &#39;&#39;) {
        $select_clause = &quot;SELECT &quot; . $this-&gt;table_name . &quot;.&quot; . $this-&gt;table_index . &quot; AS recordid, vtiger_users_last_import.deleted,&quot; . $table_cols;

        // Select Custom Field Table Columns if present
        if (isset($this-&gt;customFieldTable)) $query.= &quot;, &quot; . $this-&gt;customFieldTable[0] . &quot;.* &quot;;

        $from_clause = &quot; FROM $this-&gt;table_name&quot;;

        $from_clause.= &quot;   INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid = $this-&gt;table_name.$this-&gt;table_index&quot;;

        // Consider custom table join as well.
        if (isset($this-&gt;customFieldTable)) {
            $from_clause.= &quot; INNER JOIN &quot; . $this-&gt;customFieldTable[0] . &quot; ON &quot; . $this-&gt;customFieldTable[0] . &#39;.&#39; . $this-&gt;customFieldTable[1] . &quot; = $this-&gt;table_name.$this-&gt;table_index&quot;;
        }
        $from_clause.= &quot; LEFT JOIN vtiger_users ON vtiger_users.id = vtiger_crmentity.smownerid
                        LEFT JOIN vtiger_groups ON vtiger_groups.groupid = vtiger_crmentity.smownerid&quot;;

        $where_clause = &quot;   WHERE vtiger_crmentity.deleted = 0&quot;;
        $where_clause.= $this-&gt;getListViewSecurityParameter($module);

        if (isset($select_cols) &amp;&amp; trim($select_cols) != &#39;&#39;) {
            $sub_query = &quot;SELECT $select_cols FROM  $this-&gt;table_name AS t &quot; . &quot; INNER JOIN vtiger_crmentity AS crm ON crm.crmid = t.&quot; . $this-&gt;table_index;

            // Consider custom table join as well.
            if (isset($this-&gt;customFieldTable)) {
                $sub_query.= &quot; LEFT JOIN &quot; . $this-&gt;customFieldTable[0] . &quot; tcf ON tcf.&quot; . $this-&gt;customFieldTable[1] . &quot; = t.$this-&gt;table_index&quot;;
            }
            $sub_query.= &quot; WHERE crm.deleted=0 GROUP BY $select_cols HAVING COUNT(*)&gt;1&quot;;
        } else {
            $sub_query = &quot;SELECT $table_cols $from_clause $where_clause GROUP BY $table_cols HAVING COUNT(*)&gt;1&quot;;
        }

        $query = $select_clause . $from_clause . &quot; LEFT JOIN vtiger_users_last_import ON vtiger_users_last_import.bean_id=&quot; . $this-&gt;table_name . &quot;.&quot; . $this-&gt;table_index . &quot; INNER JOIN (&quot; . $sub_query . &quot;) AS temp ON &quot; . get_on_clause($field_values, $ui_type_arr, $module) . $where_clause . &quot; ORDER BY $table_cols,&quot; . $this-&gt;table_name . &quot;.&quot; . $this-&gt;table_index . &quot; ASC&quot;;

        return $query;
    }

    /**
     * Invoked when special actions are performed on the module.
     * @param String Module name
     * @param String Event Type (module.postinstall, module.disabled, module.enabled, module.preuninstall)
     */
    function vtlib_handler($modulename, $event_type) {
        if ($event_type == &#39;module.postinstall&#39;) {


        } else if ($event_type == &#39;module.disabled&#39;) {


        } else if ($event_type == &#39;module.enabled&#39;) {


        } else if ($event_type == &#39;module.preuninstall&#39;) {


        } else if ($event_type == &#39;module.preupdate&#39;) {


        } else if ($event_type == &#39;module.postupdate&#39;) {


        }
    }

    function setOilQualityMessageForNaturalEsterSamples($fluid_type, $primary_voltage) {
        global $adb;

        if ($fluid_type == &quot;Natural Ester&quot; &amp;&amp; $primary_voltage != &quot;&quot;) {

            $dielectric_test = $this-&gt;column_fields[&#39;cf_943&#39;];
            $dielectric877_test = trim($this-&gt;column_fields[&#39;cf_944&#39;]);
            $acid_test = $this-&gt;column_fields[&#39;cf_941&#39;];
            $ift_test = $this-&gt;column_fields[&#39;cf_942&#39;];
            $factor25_test = $this-&gt;column_fields[&#39;cf_1066&#39;];
            $factor100_test = $this-&gt;column_fields[&#39;cf_1067&#39;];
            $color_visual_test = $this-&gt;column_fields[&#39;cf_950&#39;];
            $water_test = $this-&gt;column_fields[&#39;cf_951&#39;];
            $tests_ordered = array(&#39;dielectric_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_943&#39;], &#39;acid_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_941&#39;], &#39;ift_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_942&#39;], &#39;factor25_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_1066&#39;], &#39;water_test&#39; =&gt; $this-&gt;column_fields[&#39;cf_951&#39;]);

            $all_tests_ordered = $this-&gt;tests_ordered($tests_ordered);

            $dielectric1 = trim($this-&gt;column_fields[&#39;cf_1120&#39;]);
            $dielectric2 = trim($this-&gt;column_fields[&#39;cf_1121&#39;]);
            $factor25 = trim($this-&gt;column_fields[&#39;cf_1026&#39;]);
            $ift = trim($this-&gt;column_fields[&#39;cf_1014&#39;]);
            $acid = trim($this-&gt;column_fields[&#39;cf_1013&#39;]);
            $water = trim($this-&gt;column_fields[&#39;cf_1027&#39;]);

            $statment = &quot;&quot;;

            $test_states = array( &quot;below&quot; =&gt; array(),
                                   &quot;exceed&quot; =&gt; array(), 
                                   &quot;did not meet the C57.147-2008 minimum standard&quot; =&gt; array() );
            $reclaiming = false;
            if ($primary_voltage &lt;= 69) {
                if ($dielectric_test == &quot;on&quot; &amp;&amp; (($dielectric1 &lt; 23 &amp;&amp; $dielectric1 != &quot;&quot;) || ($dielectric2 &lt; 40 &amp;&amp; $dielectric2 != &quot;&quot;))) 
                    array_push($test_states[&#39;did not meet the C57.147-2008 minimum standard&#39;], &quot;dielectric&quot;);
            } elseif ($primary_voltage &gt; 69 &amp;&amp; $primary_voltage &lt; 230) {
                if ($dielectric_test == &quot;on&quot; &amp;&amp; (($dielectric1 &lt; 28 &amp;&amp; $dielectric1 != &quot;&quot;) || ($dielectric2 &lt; 47 &amp;&amp; $dielectric2 != &quot;&quot;))) 
                    array_push($test_states[&#39;did not meet the C57.147-2008 minimum standard&#39;], &quot;dielectric&quot;);
            } elseif ($primary_voltage &gt;= 230) {
                if ($dielectric_test == &quot;on&quot; &amp;&amp; (($dielectric1 &lt; 30 &amp;&amp; $dielectric1 != &quot;&quot;) || ($dielectric2 &lt; 50 &amp;&amp; $dielectric2 != &quot;&quot;))) 
                    array_push($test_states[&#39;did not meet the C57.147-2008 minimum standard&#39;], &quot;dielectric&quot;);
            }

            if ($factor25_test == &quot;on&quot; &amp;&amp; $factor25 &gt; 1){ 
                array_push($test_states[&quot;exceed&quot;], &quot;power factor 25 degree C&quot;);
                $reclaiming = true;
            }
            if ($ift_test == &quot;on&quot; &amp;&amp; $ift &lt; 18){
                array_push($test_states[&quot;below&quot;], &quot;IFT&quot;);
                $reclaiming = true;
            }
            if ($acid_test == &quot;on&quot; &amp;&amp; $acid &gt; 2.5){
                array_push($test_states[&quot;exceed&quot;], &quot;acid&quot;);
                $reclaiming = true;
            }
            if ($water_test == &quot;on&quot; &amp;&amp; $water &gt; 400 &amp;&amp; $moisture_statement == false){
                array_push($test_states[&quot;exceed&quot;], &quot;water ppm&quot;);
            }

            $recommended = array();

            foreach($test_states as $status =&gt; $tests_ar){
                // below has different grammer than exceeds and the standard induced sentence
                if($status == &quot;below&quot; &amp;&amp; count($tests_ar) &gt; 0){
                    // different grammer if the noun is plural
                    array_push($recommended, &quot;the &quot; . $this-&gt;_get_listing($tests_ar) . ( count($tests_ar) &gt; 1 ? &quot; tests are below &quot; : &quot; test is below &quot; ) );
                }
                elseif($status == &quot;exceed&quot; &amp;&amp; count($tests_ar) &gt; 0){
                    // different grammer if the noun is plural
                    array_push($recommended, &quot;the &quot; . $this-&gt;_get_listing($tests_ar) . ( count($tests_ar) &gt; 1 ? &quot; tests exceed &quot; : &quot; test exceeds &quot; ) );
                        
                }
                elseif(count($tests_ar) &gt; 0 ){
                    $statement .= &quot;The &quot; . $this-&gt;_get_listing($tests_ar) . (count($tests_ar) &gt; 1 ? &quot; tests &quot; : &quot; test &quot; ) . $status . &quot; for in-service natural ester fluids.\n&quot;;
                }
            }   
            // We are listing out the below exceeds recommendation levels
            if(count($recommended) &gt; 0 )
               $statement .= ucfirst($this-&gt;_get_listing($recommended) . &quot;recommended levels for in-service natural esters fluids.\n&quot;);

            // set reconditioning/reclaiming
            if($statement != &quot;&quot; )
                $statement .= &quot;Recommend &quot; . ($reclaiming ? &quot;reclaiming&quot; : &quot;reconditioning&quot; ) . &quot; the fluid.\n&quot;;

            // All tests Pass.
            if ($statement == &quot;&quot; &amp;&amp; $all_tests_ordered &amp;&amp; ($dielectric1 != &quot;&quot; || $dielectric2 != &quot;&quot;) &amp;&amp; $factor25 != &quot;&quot; &amp;&amp; $ift != &quot;&quot; &amp;&amp; $moisture_statement == false) {
                $statement .= &quot;All tests meet recommended levels for in-service natural ester fluids.\n&quot;;
            }

            // no need to run query if there is no statement
            if($statement != &quot;&quot;){
                $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($statement, $this-&gt;id));
            } 
        }
    }

    function tests_ordered($tests_array) {

        //key value array for easy lookup.
        $all_tests_ordered = true;
        foreach ($tests_array as $test =&gt; $ordered) {
            $group_ordered = true;
            if (is_array($ordered)) {
                $group_ordered = false;
                foreach ($ordered as $group =&gt; $value) {
                    if ($value == &#39;on&#39;) {
                        $group_ordered = true;
                    }
                }
            } elseif ($ordered != &#39;on&#39;) {
                $all_tests_ordered = false;
                break;
            }
            if (!$group_ordered) $all_tests_ordered = false;
        }
        return $all_tests_ordered;
    }
    function degree_of_poly($fluid_type, $equipment_type, $primary_voltage) {
        global $adb;

        //ini_set(&#39;display_errors&#39;, 1);error_reporting(E_ALL);
        $furan_test = $this-&gt;column_fields[&#39;cf_954&#39;];

        if ($furan_test == &#39;on&#39; &amp;&amp; $this-&gt;column_fields[&#39;cf_1034&#39;] != &#39;&#39; &amp;&amp; in_array($equipment_type, array(&#39;Transformer&#39;, &#39;Network Transformer&#39;, &#39;Furnace Transformer&#39;, &#39;Current or Potential Transformer&#39;, &#39;Voltage Regulator&#39;, &#39;Rectifier/Precipitator&#39;))) {
            $oil_quality = &#39;&#39;;

            //Calculate Degree of Polymerization Test Result
            $degree_of_polymerization_test_result = (1.51 - log10($this-&gt;column_fields[&#39;cf_1034&#39;] / 1000)) / (0.0035);

            //Update oil quality
            if ($degree_of_polymerization_test_result &gt; 800) {
                $oil_quality.= &quot;The Degree of Polymerization is calculated to be greater than 800, indicating the cellulose insulation is in good condition.\n&quot;;
            } elseif ($degree_of_polymerization_test_result &gt; 450 &amp;&amp; $degree_of_polymerization_test_result &lt;= 800) {
                $oil_quality = &quot;The Degree of Polymerization is calculated to be between 450 - 800, indicating moderate deterioration of cellulose insulation.\n&quot;;
            } elseif ($degree_of_polymerization_test_result &gt;= 250 &amp;&amp; $degree_of_polymerization_test_result &lt;= 450) {
                $oil_quality = &quot;The Degree of Polymerization is calculated to be between 250 - 450, indicating more extensive deterioration of cellulose insulation.\n&quot;;
            } elseif ($degree_of_polymerization_test_result &lt; 250) {
                $oil_quality = &quot;The Degree of Polymerization is calculated to be less than 250, indicating the cellulose insulation is nearing the end of its&#39; life expectancy.\n&quot;;
            }

            // update Oil Quality field
            if ($oil_quality != &#39;&#39;) {
                $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($oil_quality, $this-&gt;id));
            }
        }
    }
    // We have point logic that recieved the fluid type, and if there is a 
    // point test ordered will output if the result is above below or at 
    // the acceptable temperature limit.
    function point_logic($fluid_type){
        global $adb;
        $indication_states = array(&quot;meet&quot; =&gt; array(),
                           &quot;above&quot; =&gt; array(),
                           &quot;below&quot; =&gt; array() );

        // We have a different threshold for pour flash and fire point logic when for each sample. 
        //Pour Point
        if($this-&gt;column_fields[&quot;cf_961&quot;] == &quot;on&quot; ){

            if($fluid_type == &quot;Mineral Oil&quot; &amp;&amp; trim($this-&gt;column_fields[&quot;cf_1052&quot;]) != &quot;&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1052&quot;] &lt; -40){
                array_push($indication_states[&quot;meet&quot;], &quot;pour point&quot;);
            }elseif($fluid_type == &quot;R-Temp&quot; &amp;&amp; trim($this-&gt;column_fields[&quot;cf_1052&quot;]) != &quot;&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1052&quot;] &lt; -21){
                array_push($indication_states[&quot;meet&quot;], &quot;pour point&quot;);
            }elseif($fluid_type == &quot;Natural Ester&quot; &amp;&amp; trim($this-&gt;column_fields[&quot;cf_1052&quot;]) != &quot;&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1052&quot;] &lt; -10){
                array_push($indication_states[&quot;meet&quot;], &quot;pour point&quot;);
            }elseif($fluid_type == &quot;Silicone&quot; &amp;&amp; trim($this-&gt;column_fields[&quot;cf_1052&quot;]) != &quot;&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1052&quot;] &lt; -50){
                array_push($indication_states[&quot;meet&quot;], &quot;pour point&quot;);
            }else{
                array_push($indication_states[&quot;above&quot;], &quot;pour point&quot;);
            }
        }
        //Flash Point
        if($this-&gt;column_fields[&quot;cf_957&quot;] == &quot;on&quot;){
            
            if($fluid_type == &quot;Mineral Oil&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1039&quot;] &gt; 145){
                array_push($indication_states[&quot;meet&quot;], &quot;flash point&quot;);
            }elseif($fluid_type == &quot;R-Temp&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1039&quot;] &gt; 275){
                array_push($indication_states[&quot;meet&quot;], &quot;flash point&quot;);
            }elseif($fluid_type == &quot;Natural Ester&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1039&quot;] &gt; 275){
                array_push($indication_states[&quot;meet&quot;], &quot;flash point&quot;);
            }elseif($fluid_type == &quot;Silicone&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1039&quot;] &gt; 300){
                array_push($indication_states[&quot;meet&quot;], &quot;flash point&quot;);
            }else{
                array_push($indication_states[&quot;below&quot;], &quot;flash point&quot;);
            }
        }
        //Fire Point
        if($this-&gt;column_fields[&quot;cf_964&quot;] == &quot;on&quot;){
            
            if($fluid_type == &quot;R-Temp&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1059&quot;] &gt; 300){
                array_push($indication_states[&quot;meet&quot;], &quot;fire point&quot;);
            }elseif($fluid_type == &quot;Natural Ester&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1059&quot;] &gt; 300){
                array_push($indication_states[&quot;meet&quot;], &quot;fire point&quot;);
            }elseif($fluid_type == &quot;Silicone&quot; &amp;&amp; $this-&gt;column_fields[&quot;cf_1059&quot;] &gt; 340){
                array_push($indication_states[&quot;meet&quot;], &quot;fire point&quot;);
            }elseif($fluid_type != &quot;Mineral Oil&quot;){
                array_push($indication_states[&quot;below&quot;], &quot;fire point&quot;);
            }
            
        }
        $message = &quot;&quot;;
        foreach($indication_states as $state =&gt; $points)
            $message .= $this-&gt;_get_point_statement($state, $indication_states);
        if($message != &#39;&#39;){
            $adb-&gt;pquery(&quot;UPDATE vtiger_chimneycf SET cf_1119 = CONCAT(cf_1119, &#39;&#39;, ?) WHERE chimneyid = ?&quot;, array($message, $this-&gt;id));
        }
    }
    // gets the statement needed for the message field for point logic
    function _get_point_statement($indicator, $indication_states){
        $statement = &#39;&#39;;
        if(count($indication_states[$indicator]) &gt; 0 ){
            $statement = ucfirst($this-&gt;_get_listing($indication_states[$indicator])) . $this-&gt;_get_point_statement_verb($indicator, $indication_states) . &quot; the acceptable temperature limit.\n&quot;;
        }

        return $statement;
    }
    // if the statement is plural or singular we will have different verbs
    function _get_point_statement_verb($indicator, $indication_states){
        if($indicator == &#39;meet&#39; &amp;&amp; count($indication_states[$indicator]) == 1 ){
            return &#39; meets&#39;;
        }elseif($indicator == &#39;meet&#39;){
            return &#39; meet&#39;;
        }elseif(count($indication_states[$indicator]) == 1 ){
            return &#39; is &#39; . $indicator;
        }else{
            return &#39; are &#39; . $indicator;
        }
    }
    // When listing out the tests that have failed we will need to make it 
    // gramatically correct by adding commas and &quot;and&quot; verbiage
    function _get_listing($input_ar){
            
        if (count($input_ar) &gt; 0) {
            //formats the list to be gramattically correct
            $listing = &#39;&#39;;
            $plural = false;
            for ($i = 0; $i &lt; count($input_ar); $i++) {
                if ($i == 0) $listing .= $input_ar[$i];
                elseif( $i == (count($input_ar) - 1) &amp;&amp; count($input_ar) == 2)
                    $listing .= &#39; and &#39; . $input_ar[$i];
                elseif($i == count($input_ar) - 1) {
                    $listing .= &#39;, and &#39; . $input_ar[$i];
                    $plural = true;

                } else $listing .= &#39;, &#39; . $input_ar[$i];
            }
        }
        return $listing;
    }

    /**
     * Handle saving related module information.
     * NOTE: This function has been added to CRMEntity (base class).
     * You can override the behavior by re-defining it here.
     */

    // function save_related_module($module, $crmid, $with_module, $with_crmid) { }



    /**
     * Handle deleting related module information.
     * NOTE: This function has been added to CRMEntity (base class).
     * You can override the behavior by re-defining it here.
     */

    //function delete_related_module($module, $crmid, $with_module, $with_crmid) { }



    /**
     * Handle getting related list information.
     * NOTE: This function has been added to CRMEntity (base class).
     * You can override the behavior by re-defining it here.
     */

    //function get_related_list($id, $cur_tab_id, $rel_tab_id, $actions=false) { }



    /**
     * Handle getting dependents list information.
     * NOTE: This function has been added to CRMEntity (base class).
     * You can override the behavior by re-defining it here.
     */

    //function get_dependents_list($id, $cur_tab_id, $rel_tab_id, $actions=false) { }

}
</pre></td></tr></table></div>
