<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%">   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
  29
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
  40
  41
  42
  43
  44
  45
  46
  47
  48
  49
  50
  51
  52
  53
  54
  55
  56
  57
  58
  59
  60
  61
  62
  63
  64
  65
  66
  67
  68
  69
  70
  71
  72
  73
  74
  75
  76
  77
  78
  79
  80
  81
  82
  83
  84
  85
  86
  87
  88
  89
  90
  91
  92
  93
  94
  95
  96
  97
  98
  99
 100
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
 120
 121
 122
 123
 124
 125
 126
 127
 128
 129
 130
 131
 132
 133
 134
 135
 136
 137
 138
 139
 140
 141
 142
 143
 144
 145
 146
 147
 148
 149
 150
 151
 152
 153
 154
 155
 156
 157
 158
 159
 160
 161
 162
 163
 164
 165
 166
 167
 168
 169
 170
 171
 172
 173
 174
 175
 176
 177
 178
 179
 180
 181
 182
 183
 184
 185
 186
 187
 188
 189
 190
 191
 192
 193
 194
 195
 196
 197
 198
 199
 200
 201
 202
 203
 204
 205
 206
 207
 208
 209
 210
 211
 212
 213
 214
 215
 216
 217
 218
 219
 220
 221
 222
 223
 224
 225
 226
 227
 228
 229
 230
 231
 232
 233
 234
 235
 236
 237
 238
 239
 240
 241
 242
 243
 244
 245
 246
 247
 248
 249
 250
 251
 252
 253
 254
 255
 256
 257
 258
 259
 260
 261
 262
 263
 264
 265
 266
 267
 268
 269
 270
 271
 272
 273
 274
 275
 276
 277
 278
 279
 280
 281
 282
 283
 284
 285
 286
 287
 288
 289
 290
 291
 292
 293
 294
 295
 296
 297
 298
 299
 300
 301
 302
 303
 304
 305
 306
 307
 308
 309
 310
 311
 312
 313
 314
 315
 316
 317
 318
 319
 320
 321
 322
 323
 324
 325
 326
 327
 328
 329
 330
 331
 332
 333
 334
 335
 336
 337
 338
 339
 340
 341
 342
 343
 344
 345
 346
 347
 348
 349
 350
 351
 352
 353
 354
 355
 356
 357
 358
 359
 360
 361
 362
 363
 364
 365
 366
 367
 368
 369
 370
 371
 372
 373
 374
 375
 376
 377
 378
 379
 380
 381
 382
 383
 384
 385
 386
 387
 388
 389
 390
 391
 392
 393
 394
 395
 396
 397
 398
 399
 400
 401
 402
 403
 404
 405
 406
 407
 408
 409
 410
 411
 412
 413
 414
 415
 416
 417
 418
 419
 420
 421
 422
 423
 424
 425
 426
 427
 428
 429
 430
 431
 432
 433
 434
 435
 436
 437
 438
 439
 440
 441
 442
 443
 444
 445
 446
 447
 448
 449
 450
 451
 452
 453
 454
 455
 456
 457
 458
 459
 460
 461
 462
 463
 464
 465
 466
 467
 468
 469
 470
 471
 472
 473
 474
 475
 476
 477
 478
 479
 480
 481
 482
 483
 484
 485
 486
 487
 488
 489
 490
 491
 492
 493
 494
 495
 496
 497
 498
 499
 500
 501
 502
 503
 504
 505
 506
 507
 508
 509
 510
 511
 512
 513
 514
 515
 516
 517
 518
 519
 520
 521
 522
 523
 524
 525
 526
 527
 528
 529
 530
 531
 532
 533
 534
 535
 536
 537
 538
 539
 540
 541
 542
 543
 544
 545
 546
 547
 548
 549
 550
 551
 552
 553
 554
 555
 556
 557
 558
 559
 560
 561
 562
 563
 564
 565
 566
 567
 568
 569
 570
 571
 572
 573
 574
 575
 576
 577
 578
 579
 580
 581
 582
 583
 584
 585
 586
 587
 588
 589
 590
 591
 592
 593
 594
 595
 596
 597
 598
 599
 600
 601
 602
 603
 604
 605
 606
 607
 608
 609
 610
 611
 612
 613
 614
 615
 616
 617
 618
 619
 620
 621
 622
 623
 624
 625
 626
 627
 628
 629
 630
 631
 632
 633
 634
 635
 636
 637
 638
 639
 640
 641
 642
 643
 644
 645
 646
 647
 648
 649
 650
 651
 652
 653
 654
 655
 656
 657
 658
 659
 660
 661
 662
 663
 664
 665
 666
 667
 668
 669
 670
 671
 672
 673
 674
 675
 676
 677
 678
 679
 680
 681
 682
 683
 684
 685
 686
 687
 688
 689
 690
 691
 692
 693
 694
 695
 696
 697
 698
 699
 700
 701
 702
 703
 704
 705
 706
 707
 708
 709
 710
 711
 712
 713
 714
 715
 716
 717
 718
 719
 720
 721
 722
 723
 724
 725
 726
 727
 728
 729
 730
 731
 732
 733
 734
 735
 736
 737
 738
 739
 740
 741
 742
 743
 744
 745
 746
 747
 748
 749
 750
 751
 752
 753
 754
 755
 756
 757
 758
 759
 760
 761
 762
 763
 764
 765
 766
 767
 768
 769
 770
 771
 772
 773
 774
 775
 776
 777
 778
 779
 780
 781
 782
 783
 784
 785
 786
 787
 788
 789
 790
 791
 792
 793
 794
 795
 796
 797
 798
 799
 800
 801
 802
 803
 804
 805
 806
 807
 808
 809
 810
 811
 812
 813
 814
 815
 816
 817
 818
 819
 820
 821
 822
 823
 824
 825
 826
 827
 828
 829
 830
 831
 832
 833
 834
 835
 836
 837
 838
 839
 840
 841
 842
 843
 844
 845
 846
 847
 848
 849
 850
 851
 852
 853
 854
 855
 856
 857
 858
 859
 860
 861
 862
 863
 864
 865
 866
 867
 868
 869
 870
 871
 872
 873
 874
 875
 876
 877
 878
 879
 880
 881
 882
 883
 884
 885
 886
 887
 888
 889
 890
 891
 892
 893
 894
 895
 896
 897
 898
 899
 900
 901
 902
 903
 904
 905
 906
 907
 908
 909
 910
 911
 912
 913
 914
 915
 916
 917
 918
 919
 920
 921
 922
 923
 924
 925
 926
 927
 928
 929
 930
 931
 932
 933
 934
 935
 936
 937
 938
 939
 940
 941
 942
 943
 944
 945
 946
 947
 948
 949
 950
 951
 952
 953
 954
 955
 956
 957
 958
 959
 960
 961
 962
 963
 964
 965
 966
 967
 968
 969
 970
 971
 972
 973
 974
 975
 976
 977
 978
 979
 980
 981
 982
 983
 984
 985
 986
 987
 988
 989
 990
 991
 992
 993
 994
 995
 996
 997
 998
 999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270</pre></td><td><pre style="margin: 0; line-height: 125%">	include_once HOME_PATH . &#39;global/db_connect.php&#39;;
	include_once HOME_PATH . &#39;global/classes/transmissions.php&#39;;
	include_once HOME_PATH . &#39;global/classes/curl.php&#39;;
	include_once HOME_PATH . &#39;global/classes/partner_inquiry.php&#39;;
	include_once HOME_PATH . &#39;global/classes/class.MFPObject.php&#39;;
	include_once HOME_PATH . &#39;global/classes/class.MFPUtility.php&#39;;
	include_once HOME_PATH . &#39;global/classes/class.MFPLeadTracker.php&#39;;
	include_once HOME_PATH . &#39;global/classes/class.MFPEmail.php&#39;;
	include_once HOME_PATH . &#39;global/classes/class.SandboxPartnerCapMembers.php&#39;;
	// Required files for EDMC
	include_once HOME_PATH . &#39;global/classes/exporting/edmc.php&#39;;
	include_once HOME_PATH . &#39;global/classes/nusoap/nusoap.php&#39;;
	//include_once HOME_PATH . &#39;global/colleges/source_tracking_processing.php&#39;;

	class View extends Public_Controller
	{
	    
	    // Holds our data array for our view
	    private $data = array();a
	    
	    // Holds our form object (fields, restrictions, settings, etc)
	    private $form;
	    
	    // Holds an array of information for a form field
	    private $field = array();
	    
	    // Holds an array of form fields
	    private $fields = array();
	    
	    // Our form string that we build and pass to the view
	    private $form_string;
	    
	    // Hold our post data
	    private $post = array();
	    
	    // Holds our validation restrictions, if there are any
	    private $restrictions = array();
	    
	    // Holds our result message
	    private $result_message = array();
	    
	    // An array of standard field names that need to be &quot;full width&quot; when displaying the form
	    private $wide_fields = array(&#39;postal_code&#39;, &#39;program_of_interest&#39;, &#39;campus_of_interest&#39;);
	    
	    public function __construct()
	    {
	        parent::__construct();
	        
	        // Load our form model
	        $this-&gt;load-&gt;model(&#39;forms_m&#39;);
	        // Load our partner_degrees_model
	        $this-&gt;load-&gt;model(&#39;partner_degrees_m&#39;);
	        
	        // Load our form helper
	        $this-&gt;load-&gt;helper(&#39;form&#39;);
	        
	    }
	    
	    public function load($name = NULL)
	    {
	        $id = $this-&gt;forms_m-&gt;find_by_name($name);
	        if (!$id) {
	            die(&#39;Could not find form!&#39;);
	        }
	        $this-&gt;render($id);
	    }
	    
	    // This method handles rendering the form object
	    public function render($id = NULL)
	    {
	        
	        // Grab the form and all associated properties
	        $this-&gt;form = $this-&gt;forms_m-&gt;get_form_by_ID($id);
	        
	        // Can&#39;t find it, die!
	        if (!$this-&gt;form) {
	            die(&#39;Could not load form data&#39;);
	        }
	        
	        // If we have test mode
	        if ($this-&gt;uri-&gt;segment(5) == &#39;test&#39;) {
	            //echo &#39;&lt;pre&gt;&#39;; print_r($_REQUEST); echo &#39;&lt;/pre&gt;&#39;;
	            //$this-&gt;output-&gt;enable_profiler(TRUE);
	        }
	        
	        // Not sure what the hell this is but was included in the old begin.php file
	        if (isset($_GET[&#39;c&#39;]) === TRUE &amp;&amp; is_numeric($_GET[&#39;c&#39;]) == true) {
	            setcookie(&#39;c&#39;, $_GET[&#39;c&#39;], (time() + 604800), &#39;/&#39;);
	        }
	        
	        // If this is an internal form, we allow them to re-submit the form over and over
	        if (isset($_GET[&#39;r&#39;]) === TRUE &amp;&amp; $_GET[&#39;r&#39;] == &#39;ayb&#39;) {
	            $_SESSION[&#39;inquiry_sucess&#39;] = &#39;no&#39;;
	        }
	        
	        // Check if someone submitted this already
	        if (isset($_SESSION[&#39;inquiry_sucess&#39;]) === TRUE &amp;&amp; $_SESSION[&#39;inquiry_sucess&#39;] == &#39;yes&#39;) {
	            // We want to display an error message in our view
	            $this-&gt;data[&#39;message&#39;] = &#39;Sorry, this form has already been submitted&#39;;
	        }
	        
	        // Generate our form string
	        $this-&gt;_generate_form_string();
	        
	        // Generate our validation string
	        $this-&gt;form-&gt;custom_validation = $this-&gt;_generate_validation_string();
	        
	        // Set our data values for the view template
	        $this-&gt;data[&#39;partner_id&#39;]        = $this-&gt;form-&gt;partner_id;
	        $this-&gt;data[&#39;partner_name&#39;]      = $this-&gt;form-&gt;partner_name;
	        $this-&gt;data[&#39;restrictions&#39;]      = $this-&gt;form-&gt;restrictions;
	        $this-&gt;data[&#39;form&#39;]              = $this-&gt;form_string;
	        $this-&gt;data[&#39;logo&#39;]              = $this-&gt;form-&gt;logo;
	        $this-&gt;data[&#39;title&#39;]             = &#39;MyFootpath | &#39; . $this-&gt;form-&gt;name;
	        $this-&gt;data[&#39;form_name&#39;]         = $this-&gt;form-&gt;name;
	        $this-&gt;data[&#39;content&#39;]           = &#39;&lt;div id=&quot;content&quot;&gt;&#39; . $this-&gt;form-&gt;content . &#39;&lt;/div&gt;&#39;;
	        $this-&gt;data[&#39;custom_validation&#39;] = $this-&gt;form-&gt;custom_validation;
	        $this-&gt;data[&#39;custom_javascript&#39;] = $this-&gt;form-&gt;custom_javascript;
	        $this-&gt;data[&#39;leadid_success&#39;]    = $this-&gt;form-&gt;leadid_success_script;
	        
	        // Load our view			
	        $this-&gt;load-&gt;view(&#39;forms/form&#39;, $this-&gt;data);
	    }
	    
	    // This method handles rendering the form object
	    public function test_render($id = NULL)
	    {
	        
	        // Grab the form and all associated properties
	        $this-&gt;form = $this-&gt;forms_m-&gt;get_form_by_ID($id);
	        
	        // Can&#39;t find it, die!
	        if (!$this-&gt;form) {
	            die(&#39;Could not load form data&#39;);
	        }
	        
	        // If we have test mode
	        if ($this-&gt;uri-&gt;segment(5) == &#39;test&#39;) {
	            //echo &#39;&lt;pre&gt;&#39;; print_r($_REQUEST); echo &#39;&lt;/pre&gt;&#39;;
	            //$this-&gt;output-&gt;enable_profiler(TRUE);
	        }
	        
	        // Not sure what the hell this is but was included in the old begin.php file
	        if (isset($_GET[&#39;c&#39;]) === TRUE &amp;&amp; is_numeric($_GET[&#39;c&#39;]) == true) {
	            setcookie(&#39;c&#39;, $_GET[&#39;c&#39;], (time() + 604800), &#39;/&#39;);
	        }
	        
	        // If this is an internal form, we allow them to re-submit the form over and over
	        if (isset($_GET[&#39;r&#39;]) === TRUE &amp;&amp; $_GET[&#39;r&#39;] == &#39;ayb&#39;) {
	            $_SESSION[&#39;inquiry_sucess&#39;] = &#39;no&#39;;
	        }
	        
	        // Check if someone submitted this already
	        if (isset($_SESSION[&#39;inquiry_sucess&#39;]) === TRUE &amp;&amp; $_SESSION[&#39;inquiry_sucess&#39;] == &#39;yes&#39;) {
	            // We want to display an error message in our view
	            $this-&gt;data[&#39;message&#39;] = &#39;Sorry, this form has already been submitted&#39;;
	        }
	        
	        // Generate our form string
	        $this-&gt;_generate_form_string();
	        
	        // Generate our validation string
	        $this-&gt;form-&gt;custom_validation = $this-&gt;_generate_validation_string();
	        
	        // Set our data values for the view template
	        $this-&gt;data[&#39;partner_id&#39;]        = $this-&gt;form-&gt;partner_id;
	        $this-&gt;data[&#39;partner_name&#39;]      = $this-&gt;form-&gt;partner_name;
	        $this-&gt;data[&#39;restrictions&#39;]      = $this-&gt;form-&gt;restrictions;
	        $this-&gt;data[&#39;form&#39;]              = $this-&gt;form_string;
	        $this-&gt;data[&#39;logo&#39;]              = $this-&gt;form-&gt;logo;
	        $this-&gt;data[&#39;title&#39;]             = &#39;MyFootpath | &#39; . $this-&gt;form-&gt;name;
	        $this-&gt;data[&#39;form_name&#39;]         = $this-&gt;form-&gt;name;
	        $this-&gt;data[&#39;content&#39;]           = &#39;&lt;div id=&quot;content&quot;&gt;&#39; . $this-&gt;form-&gt;content . &#39;&lt;/div&gt;&#39;;
	        $this-&gt;data[&#39;custom_validation&#39;] = $this-&gt;form-&gt;custom_validation;
	        $this-&gt;data[&#39;custom_javascript&#39;] = $this-&gt;form-&gt;custom_javascript;
	        $this-&gt;data[&#39;leadid_success&#39;]    = $this-&gt;form-&gt;leadid_success_script;
	        
	        // Load our view			
	        $this-&gt;load-&gt;view(&#39;forms/test_form&#39;, $this-&gt;data);
	    }
	    
	    public function send_error()
	    {
	        // Check that we have post values
	        if (isset($_POST) &amp;&amp; count($_POST) &gt; 0) {
	            
	            // Get values for email
	            $partner   = isset($_POST[&#39;partner&#39;]) ? $_POST[&#39;partner&#39;] : &#39;&#39;;
	            $form_url  = isset($_POST[&#39;form_url&#39;]) ? $_POST[&#39;form_url&#39;] : &#39;&#39;;
	            $error_msg = isset($_POST[&#39;message&#39;]) ? $_POST[&#39;message&#39;] : &#39;&#39;;
	            
	            // Format our message
	            $message = &#39;There was an error with the form:&#39; . &quot;\n\r&quot;;
	            $message .= &#39;Partner: &#39; . $partner . &quot;\n&quot;;
	            $message .= &#39;Form Page: &#39; . $form_url . &quot;\n&quot;;
	            $message .= &#39;Error: &#39; . $error_msg;
	            
	            // Send this to Chris C and Chris R and if problem we can Fwd to Suzanne
	            $recipients = &#39;jdelgado@myfootpath.com, escray@myfootpath.com&#39;;
	            
	            // Kick out email
	            mail($recipients, &#39;Error with form submission&#39;, $message);
	        }
	        echo &#39;1&#39;;
	    }
	    
	    // This method takes a post array with the form information (as well as form ID) and processes it
	    public function submit()
	    {
	        
	        // Set our post data for this class to use
	        $this-&gt;post = $_POST;
	        if (!array_key_exists(&#39;form_id&#39;, $this-&gt;post)) {
	            mail(&#39;jdelgado@myfootpath.com&#39;, &#39;No form ID new form builder&#39;, &#39;No form ID exists&#39;);
	        }
	        
	        // Set a testing flag
	        $dev_mode = FALSE;
	        if (isset($this-&gt;post[&#39;myfootpath_test&#39;]) &amp;&amp; $this-&gt;post[&#39;myfootpath_test&#39;] == &#39;myfootpath_test&#39;) {
	            $dev_mode = TRUE;
	        }
	        
	        // Set a capping test flag
	        $dev_cap_mode = FALSE;
	        if (array_key_exists(&#39;test_cap&#39;, $this-&gt;post) &amp;&amp; $this-&gt;post[&#39;test_cap&#39;] == &#39;test_cap&#39;) {
	            $dev_cap_mode = TRUE;
	            //echo &#39;&lt;pre&gt;&#39;; print_r($_POST); exit;
	        }
	        
	        
	        // Get our form data from the database
	        $this-&gt;form = $this-&gt;forms_m-&gt;get_form_by_ID($this-&gt;post[&#39;form_id&#39;]);
	        
	        if (!$this-&gt;form) {
	            die(&#39;Could not load form data&#39;);
	        }
	        
	        // Set the partner ID
	        $partner_id = $this-&gt;form-&gt;partner_id;
	        
	        // Check that this is not duplicate
	        if (!$this-&gt;_submitted_leads_check($partner_id, $this-&gt;post[&#39;email&#39;], $this-&gt;post[&#39;last_name&#39;]) || $dev_mode) {
	            
	            // This line of code must be modified when school is online, or set user application to make an hidden field named campus_of_interest
	            $partner_campuses_id = $this-&gt;post[&#39;campus_of_interest&#39;];
	            
	            // Use the test URL if we wan to submit in testing mode, otherwise use live
	            $post_url = (array_key_exists(&#39;myfootpath_test&#39;, $this-&gt;post) &amp;&amp; $this-&gt;post[&#39;myfootpath_test&#39;] == &#39;myfootpath_test&#39;) ? $this-&gt;form-&gt;post_test : $this-&gt;form-&gt;post_live;
	            
	            // Set our BF Lead ID to a variable and unset as we want only keep this for internal use!
	            $bf_lead_id = isset($this-&gt;post[&#39;lead_id&#39;]) ? $this-&gt;post[&#39;lead_id&#39;] : &#39;&#39;;
	            unset($this-&gt;post[&#39;lead_id&#39;]);
	            
	            // If this is going to EDMC set the data array and include required files
	            if ($this-&gt;form-&gt;soap_method == 1) {
	                
	                // Our required data array items
	                $data_array[&#39;first_name&#39;]              = (array_key_exists(&#39;first_name&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;first_name&#39;] : &#39;&#39;;
	                $data_array[&#39;last_name&#39;]               = (array_key_exists(&#39;last_name&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;last_name&#39;] : &#39;&#39;;
	                $data_array[&#39;address1&#39;]                = (array_key_exists(&#39;address1&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;address1&#39;] : &#39;&#39;;
	                $data_array[&#39;address2&#39;]                = (array_key_exists(&#39;address2&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;address2&#39;] : &#39;&#39;;
	                $data_array[&#39;city&#39;]                    = (array_key_exists(&#39;city&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;city&#39;] : &#39;&#39;;
	                $data_array[&#39;state&#39;]                   = (array_key_exists(&#39;state&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;state&#39;] : &#39;&#39;;
	                $data_array[&#39;postal_code&#39;]             = (array_key_exists(&#39;postal_code&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;postal_code&#39;] : &#39;&#39;;
	                $data_array[&#39;phone&#39;]                   = (array_key_exists(&#39;phone&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;phone&#39;] : &#39;&#39;;
	                $data_array[&#39;phone2&#39;]                  = (array_key_exists(&#39;phone2&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;phone2&#39;] : &#39;&#39;;
	                $data_array[&#39;ip_address&#39;]              = $_SERVER[&#39;REMOTE_ADDR&#39;];
	                $data_array[&#39;vendor_lead_identifier&#39;]  = time();
	                $data_array[&#39;vendor_code&#39;]             = (array_key_exists(&#39;vendor_code&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;vendor_code&#39;] : &#39;&#39;;
	                $data_array[&#39;test_flag&#39;]               = (array_key_exists(&#39;myfootpath_test&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;myfootpath_test&#39;] : &#39;&#39;;
	                $data_array[&#39;location_code&#39;]           = $this-&gt;forms_m-&gt;get_campus_client_id($this-&gt;post[&#39;campus_of_interest&#39;]);
	                $data_array[&#39;current_date&#39;]            = gmdate(&#39;Y-m-d&#39;);
	                $data_array[&#39;current_time&#39;]            = gmdate(&#39;H:i:s&#39;);
	                $data_array[&#39;source_code&#39;]             = (array_key_exists(&#39;source&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;source&#39;] : &#39;&#39;;
	                $data_array[&#39;current_full_date&#39;]       = $data_array[&#39;current_date&#39;] . &#39; &#39; . $data_array[&#39;current_time&#39;];
	                $data_array[&#39;version_identifier_code&#39;] = (array_key_exists(&#39;version_identifier_code&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;version_identifier_code&#39;] : &#39;&#39;;
	                $data_array[&#39;program_of_interest&#39;]     = $this-&gt;forms_m-&gt;get_program_value($this-&gt;post[&#39;program_of_interest&#39;]);
	                $data_array[&#39;post_url&#39;]                = $post_url;
	                $data_array[&#39;uhighlevel&#39;]              = (array_key_exists(&#39;education_level&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;education_level&#39;] : &#39;&#39;;
	                $data_array[&#39;YearHSGED&#39;]               = (array_key_exists(&#39;graduation_year&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;graduation_year&#39;] : &#39;&#39;;
	                $data_array[&#39;militaryStatus&#39;]          = (array_key_exists(&#39;military&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;military&#39;] : &#39;&#39;;
	                $data_array[&#39;vendor_affiliate&#39;]        = (array_key_exists(&#39;VendorLeadID&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;VendorLeadID&#39;] : &#39;&#39;;
	                $data_array[&#39;affiliate_id&#39;]            = (array_key_exists(&#39;affiliate_id&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;affiliate_id&#39;] : &#39;&#39;;
	                $data_array[&#39;warmTransferResult&#39;]      = (array_key_exists(&#39;warm_transfer_result&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;warm_transfer_result&#39;] : &#39;&#39;;
	                $data_array[&#39;uhighlevel&#39;]              = (array_key_exists(&#39;edulevel&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;edulevel&#39;] : &#39;&#39;;
	                $data_array[&#39;email&#39;]                   = (array_key_exists(&#39;email&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;email&#39;] : &#39;&#39;;
	                
	                
	                // Instantiate our EDMC Class and required data
	                $au = new EDMC($data_array, $data_array[&#39;current_full_date&#39;]);
	                
	                // Get the post data
	                $post_data = $au-&gt;GetPostData();
	                
	                // Hold our response for use later
	                $response = $au-&gt;GetResponse() . &quot;\n&quot; . $au-&gt;GetResponseFeedBack();
	                
	                // Otherwise just use Curl
	            } else {
	                
	                // Get our posting string
	                $post_data   = $this-&gt;_get_post_string($this-&gt;form, $this-&gt;post);
	                $custom_post = false;
	                // Load our custom PHP File
	                if ($this-&gt;form-&gt;custom_php == &#39;1&#39;) {
	                    if ($this-&gt;form-&gt;id != 395) {
	                        include(HOME_PATH . &#39;codeigniter/application/form_includes/&#39; . $this-&gt;form-&gt;id . &#39;.php&#39;);
	                    }
	                }
	                
	                // If in sandbox mode, return the posting string and exit
	                if (isset($this-&gt;post[&#39;sandbox&#39;]) &amp;&amp; $this-&gt;post[&#39;sandbox&#39;] == &#39;sandbox&#39;) {
	                    echo json_encode(array(
	                        &#39;result&#39; =&gt; TRUE,
	                        &#39;result_message&#39; =&gt; $post_data
	                    ));
	                    exit;
	                }
	                
	            }
	            
	            // If we have a record for LeadID, we want to save it
	            if (isset($this-&gt;post[&#39;universal_leadid&#39;]) &amp;&amp; !empty($this-&gt;post[&#39;universal_leadid&#39;])) {
	                $this-&gt;forms_m-&gt;insert_leadid_token($partner_id, $this-&gt;post[&#39;universal_leadid&#39;], $this-&gt;post[&#39;email&#39;], $post_data);
	            }
	            
	            //if the custom_php file wants to post the data in a specific do not do the below.
	            
	            if (!$custom_post) {
	                // Load up Curl
	                $new_curl = new Curl($post_url, $post_data);
	                
	                // Get the response data from the partner
	                $response = $new_curl-&gt;GetCallResponseData();
	            }
	            // Instantiate our transmissions class and set the transmissions data
	            $new_transmission = new Transmissions($partner_id, $partner_campuses_id, $post_url, $post_data);
	            
	            // Record our Curl response in the internal_inquiry_transmissions table			
	            $new_transmission-&gt;RecordTransmissionResponse($response);
	            
	            // Instantiate a lead tracker object
	            $LeadTracker = new MFPLeadTracker();
	            $LeadTracker-&gt;setPartnerId($partner_id);
	            $LeadTracker-&gt;setPartnerCampusId($partner_campuses_id);
	            $LeadTracker-&gt;setImportedDegreeId($this-&gt;post[&#39;program_of_interest&#39;]);
	            $LeadTracker-&gt;setInternalTransmissionId($new_transmission-&gt;GetTransmissionsId());
	            $LeadTracker-&gt;setPostDatetime(date(&#39;Y-m-d H:i:s&#39;));
	            $LeadTracker-&gt;setSuccess(0);
	            $LeadTracker-&gt;setBfLeadId($bf_lead_id);
	            $LeadTracker-&gt;setExternal(0);
	            $LeadTracker-&gt;setUserId((isset($_SESSION[&#39;user_id&#39;]) ? $_SESSION[&#39;user_id&#39;] : 0));
	            $LeadTracker-&gt;save(true);
	            
	            // Compare the valid response
	            if (stristr($response, $this-&gt;form-&gt;accepted_response) == FALSE) {
	                
	                if ($dev_mode === FALSE) {
	                    //gives a generic error message for reps on the floor
	                    $this-&gt;result_message[] = $this-&gt;get_generic_error_message($new_transmission-&gt;GetTransmissionsId());
	                } else {
	                    //Set our error message to its true value if we are in dev mode
	                    $this-&gt;result_message[] = $response;
	                }
	                
	            } else {
	                
	                // Process the capping and tracking for this lead
	                // We now want to change the inquiry success value in the session to be yes
	                $_SESSION[&#39;inquiry_sucess&#39;] = &#39;yes&#39;;
	                
	                //Build the inquiry_data array for the internal inquiry database
	                $inquiry_data                        = $this-&gt;post;
	                $inquiry_data[&#39;partner_campuses_id&#39;] = (isset($partner_campuses_id) === TRUE &amp;&amp; $partner_campuses_id != &#39;&#39; ? $partner_campuses_id : $this-&gt;post[&#39;campus_of_interest&#39;]);
	                $inquiry_data[&#39;partner_degrees_id&#39;]  = (isset($this-&gt;post[&#39;program_of_interest&#39;]) === TRUE &amp;&amp; $this-&gt;post[&#39;program_of_interest&#39;] != &#39;&#39; ? $this-&gt;post[&#39;program_of_interest&#39;] : 0);
	                $inquiry_data[&#39;campaign_id&#39;]         = (isset($_COOKIE[&#39;c&#39;]) === TRUE ? $_COOKIE[&#39;c&#39;] : 1);
	                $inquiry_data[&#39;ip_address&#39;]          = $_SERVER[&#39;REMOTE_ADDR&#39;];
	                $inquiry_data[&#39;inquiry_source&#39;]      = (isset($this-&gt;post[&#39;inquiry_source&#39;]) === TRUE &amp;&amp; $this-&gt;post[&#39;inquiry_source&#39;] == &#39;internal&#39; ? &#39;internal&#39; : &#39;website&#39;);
	                
	                // Set some cookie for some unknown reason
	                setcookie(&#39;acc&#39;, &#39;yes&#39;);
	                
	                // Set the internal_inquiry_transmission_id for use with capping
	                $internal_inquiry_transmission_id = 0;
	                
	                // Defined outside of this script, after a form is submitted but before this script is included
	                if (is_object($new_transmission) === true) {
	                    $internal_inquiry_transmission_id = $new_transmission-&gt;GetTransmissionsId();
	                }
	                
	                // Insert the internal inquiry record
	                $partner_inquiry = new Partner_Inquiry($partner_id, $inquiry_data, $post_data, $internal_inquiry_transmission_id);
	                
	                $temp = $this-&gt;_get_post_string($this-&gt;form, $this-&gt;post);
	                
	                // We don&#39;t want to increment the caps in dev mode
	                if ($dev_mode === FALSE || ($dev_mode === TRUE &amp;&amp; $dev_cap_mode === TRUE)) {
	                    // Check for a campus level cap
	                    $cap_member = SandboxPartnerCapMembers::initWithCampusId($inquiry_data[&#39;partner_campuses_id&#39;]);
	                    
	                    // Values for cap group to be added to lead tracker
	                    $cap_group_id        = 0;
	                    $cap_group_member_id = 0;
	                    
	                    // Hold our user ID variable incase we&#39;re not logged in
	                    $user_id = (isset($_SESSION[&#39;user_id&#39;]) ? $_SESSION[&#39;user_id&#39;] : &#39;&#39;);
	                    
	                    if ($cap_member != null) {
	                        $cap_member-&gt;incrementCap($user_id, $internal_inquiry_transmission_id);
	                        $cap_group_id        = $cap_member-&gt;getPartnerCapsId();
	                        $cap_group_member_id = $cap_member-&gt;getId();
	                    } else {
	                        // Check for a program level cap and find the partner imported degree id
	                        $cap_member = SandboxPartnerCapMembers::initWithImportedDegreeId($inquiry_data[&#39;partner_degrees_id&#39;]);
	                        if ($cap_member != null) {
	                            $cap_member-&gt;incrementCap($user_id, $internal_inquiry_transmission_id);
	                            $cap_group_id        = $cap_member-&gt;getPartnerCapsId();
	                            $cap_group_member_id = $cap_member-&gt;getId();
	                        }
	                    }
	                    
	                    if ($dev_mode === FALSE) {
	                        // Check that this LeadTracker (defined outside of script) has been instantiated or not
	                        if (isset($LeadTracker) === TRUE &amp;&amp; is_object($LeadTracker) === TRUE) {
	                            $partner_degree = $this-&gt;partner_degrees_m-&gt;get_partner_degree($inquiry_data[&#39;partner_degrees_id&#39;], $inquiry_data[&#39;partner_campuses_id&#39;]);
	                            $LeadTracker-&gt;setCapGroupId($cap_group_id);
	                            $LeadTracker-&gt;setCapGroupMemberId($cap_group_member_id);
	                            $LeadTracker-&gt;setSuccess(1);
	                            $LeadTracker-&gt;setIsBonusFill((is_array($partner_degree) &amp;&amp; count($partner_degree) &gt; 0) ? $partner_degree[&#39;is_bonus_fill&#39;] : 0);
	                            $LeadTracker-&gt;setUserId($_SESSION[&#39;user_id&#39;]);
	                            $LeadTracker-&gt;save();
	                        } else {
	                            // Otherwise log the form submission in a file to keep track of what active forms still need updating
	                            MFPUtility::appendToUntrackedFormSubmissionLog();
	                        }
	                        
	                        // Write to log file to track what forms are being used
	                        $message = &#39;Form ID: &#39; . (isset($formid) == true ? $formid : &#39;&#39;) . &quot;\n&quot;;
	                        $message .= &#39; Partner ID: &#39; . (isset($partner_id) == true ? $partner_id : &#39;&#39;) . &quot;\n&quot;;
	                        $message .= &#39; Campus ID: &#39; . $inquiry_data[&#39;partner_campuses_id&#39;] . &quot;\n&quot;;
	                        $message .= &#39; Imported Degree ID: &#39; . $inquiry_data[&#39;partner_degrees_id&#39;] . &quot;\n&quot;;
	                        $message .= &#39; Source: &#39; . $inquiry_data[&#39;inquiry_source&#39;] . &quot;\n&quot;;
	                        $message .= &#39; Transmission ID: &#39; . $internal_inquiry_transmission_id . &quot;\n&quot;;
	                        $message .= &#39; Inquiry ID: &#39; . $partner_inquiry-&gt;inquiry_id . &quot;\n&quot;;
	                        $message .= &#39; Cap Group ID: &#39; . ($cap_member != null ? $cap_member-&gt;getPartnerCapsId() : &#39;&#39;) . &quot;\n&quot;;
	                        $message .= &#39; Cap Member ID: &#39; . ($cap_member != null ? $cap_member-&gt;getId() : &#39;&#39;);
	                        $filename = HOME_PATH . &#39;logs/forms/submission-end-&#39; . date(&#39;Y-m-d&#39;) . &#39;.log&#39;;
	                        
	                        MFPUtility::writeToLogFile($message, $filename);
	                        
	                        // Send out an email if a transmission record was not found, this should never happen
	                        if ($internal_inquiry_transmission_id == 0) {
	                            $email = new MFPEmail();
	                            $email-&gt;setTo(&#39;sschlinger@myfootpath.com, ccachor@myfootpath.com, escray@myfootpath.com&#39;);
	                            $email-&gt;setFrom(&#39;error-reporting@myfootpath.com&#39;);
	                            $email-&gt;setSubject(&#39;Transmission Record Missing&#39;);
	                            $email-&gt;setMessage($message);
	                            $email-&gt;sendAsPlainText();
	                        }
	                    }
	                }
	            }
	        } else {
	            $this-&gt;result_message[] = &#39;Sorry, this form has already been submitted with this person\&#39;s information.&#39;;
	        }
	        
	        $result = FALSE;
	        if (count($this-&gt;result_message) == 0) {
	            $result = TRUE;
	            
	            // If we&#39;re in dev mode send the posting string back
	            if ($dev_mode) {
	                //$this-&gt;result_message[] = $post_data;
	                // Otherwise return the default message
	            } else {
	                if ($this-&gt;form-&gt;id == 433 || $this-&gt;form-&gt;id == 435) {
	                    $this-&gt;result_message[] = &#39;Thank you for submitting this form.&#39;;
	                } else {
	                    $this-&gt;result_message[] = &#39;This lead has been processed by the client successfully!&#39;;
	                }
	            }
	        }
	        echo json_encode(array(
	            &#39;result&#39; =&gt; $result,
	            &#39;result_message&#39; =&gt; $this-&gt;result_message
	        ));
	    }
	    
	    // This method takes a post array with the form information (as well as form ID) and processes it
	    public function test_submit()
	    {
	        
	        // Set our post data for this class to use
	        $this-&gt;post = $_POST;
	        
	        // Set a testing flag
	        $dev_mode = FALSE;
	        if (isset($this-&gt;post[&#39;myfootpath_test&#39;]) &amp;&amp; $this-&gt;post[&#39;myfootpath_test&#39;] == &#39;myfootpath_test&#39;) {
	            $dev_mode = TRUE;
	        }
	        
	        // Get our form data from the database
	        $this-&gt;form = $this-&gt;forms_m-&gt;get_form_by_ID($this-&gt;post[&#39;form_id&#39;]);
	        if (!$this-&gt;form) {
	            die(&#39;Could not load form data&#39;);
	        }
	        
	        // Set the partner ID
	        $partner_id = $this-&gt;form-&gt;partner_id;
	        
	        // Check that this is not duplicate
	        if (!$this-&gt;_submitted_leads_check($partner_id, $this-&gt;post[&#39;email&#39;], $this-&gt;post[&#39;last_name&#39;])) {
	            
	            // This line of code must be modified when school is online, or set user application to make an hidden field named campus_of_interest
	            $partner_campuses_id = $this-&gt;post[&#39;campus_of_interest&#39;];
	            
	            // Use the test URL if we wan to submit in testing mode, otherwise use live
	            $post_url = (array_key_exists(&#39;myfootpath_test&#39;, $this-&gt;post) &amp;&amp; $this-&gt;post[&#39;myfootpath_test&#39;] == &#39;myfootpath_test&#39;) ? $this-&gt;form-&gt;post_test : $this-&gt;form-&gt;post_live;
	            
	            // Set our BF Lead ID to a variable and unset as we want only keep this for internal use!
	            $bf_lead_id = isset($this-&gt;post[&#39;lead_id&#39;]) ? $this-&gt;post[&#39;lead_id&#39;] : &#39;&#39;;
	            unset($this-&gt;post[&#39;lead_id&#39;]);
	            
	            // We want to load our custom PHP file here
	            $temp = $this-&gt;_get_post_string($this-&gt;form, $this-&gt;post);
	            //echo json_encode(array(&#39;result&#39; =&gt; TRUE, &#39;result_message&#39; =&gt; $post_data)); 
	            
	            // If this is going to EDMC set the data array and include required files
	            if ($this-&gt;form-&gt;soap_method === 1) {
	                
	                // Our required data array items
	                $data_array[&#39;ip_address&#39;]              = $_SERVER[&#39;REMOTE_ADDR&#39;];
	                $data_array[&#39;vendor_lead_identifier&#39;]  = time();
	                $data_array[&#39;vendor_code&#39;]             = (in_array(&#39;vendor_code&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;vendor_code&#39;] : &#39;&#39;;
	                $data_array[&#39;test_flag&#39;]               = &#39;&#39;;
	                $data_array[&#39;location_code&#39;]           = $this-&gt;forms_m-&gt;get_campus_client_id($this-&gt;post[&#39;campus_of_interest&#39;]);
	                $data_array[&#39;current_date&#39;]            = gmdate(&#39;Y-m-d&#39;);
	                $data_array[&#39;current_time&#39;]            = gmdate(&#39;H:i:s&#39;);
	                $data_array[&#39;source_code&#39;]             = (in_array(&#39;source_code&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;source_code&#39;] : &#39;&#39;;
	                $data_array[&#39;current_full_date&#39;]       = $data_array[&#39;current_date&#39;] . &#39; &#39; . $data_array[&#39;current_time&#39;];
	                $data_array[&#39;version_identifier_code&#39;] = (in_array(&#39;version_identifier_code&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;version_identifier_code&#39;] : &#39;&#39;;
	                $data_array[&#39;program_of_interest&#39;]     = $this-&gt;forms_m-&gt;get_program_value($this-&gt;post[&#39;program_of_interest&#39;]);
	                $data_array[&#39;post_url&#39;]                = $post_url;
	                $data_array[&#39;uhighlevel&#39;]              = (in_array(&#39;education_level&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;education_level&#39;] : &#39;&#39;;
	                $data_array[&#39;YearHSGED&#39;]               = (in_array(&#39;graduation_year&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;graduation_year&#39;] : &#39;&#39;;
	                $data_array[&#39;militaryStatus&#39;]          = (in_array(&#39;military&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;military&#39;] : &#39;&#39;;
	                $data_array[&#39;vendor_affiliate&#39;]        = &#39;&#39;;
	                $data_array[&#39;address2&#39;]                = (in_array(&#39;address2&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;address2&#39;] : &#39;&#39;;
	                ;
	                $data_array[&#39;affiliate_id&#39;] = (in_array(&#39;affiliate_id&#39;, $this-&gt;post)) ? $this-&gt;post[&#39;affiliate_id&#39;] : &#39;&#39;;
	                
	                if (isset($this-&gt;post[&#39;sandbox&#39;]) &amp;&amp; $this-&gt;post[&#39;sandbox&#39;] == &#39;sandbox&#39;) {
	                    echo json_encode(array(
	                        &#39;result&#39; =&gt; TRUE,
	                        &#39;result_message&#39; =&gt; $data_array
	                    ));
	                    exit;
	                }
	                
	                // Instantiate our EDMC Class and required data
	                $au = new EDMC($data_array, $data_array[&#39;current_full_date&#39;]);
	                
	                // Get the post data
	                $post_data = $au-&gt;GetPostData();
	                
	                // Hold our response for use later
	                $response = $au-&gt;GetResponse() . &quot;\n&quot; . $au-&gt;GetResponseFeedBack();
	                
	                // Otherwise just use Curl			
	            } else {
	                
	                // Get our posting string
	                $post_data = $this-&gt;_get_post_string($this-&gt;form, $this-&gt;post);
	                
	                if (isset($this-&gt;post[&#39;sandbox&#39;]) &amp;&amp; $this-&gt;post[&#39;sandbox&#39;] == &#39;sandbox&#39;) {
	                    echo json_encode(array(
	                        &#39;result&#39; =&gt; TRUE,
	                        &#39;result_message&#39; =&gt; $post_data
	                    ));
	                    exit;
	                }
	                
	            }
	            
	            // If we have a record for LeadID, we want to save it
	            if (isset($this-&gt;post[&#39;universal_leadid&#39;]) &amp;&amp; !empty($this-&gt;post[&#39;universal_leadid&#39;])) {
	                $this-&gt;forms_m-&gt;insert_leadid_token($partner_id, $this-&gt;post[&#39;universal_leadid&#39;], $this-&gt;post[&#39;email&#39;], $post_data);
	            }
	            
	            // Load up Curl
	            $new_curl = new Curl($post_url, $post_data);
	            
	            // Get the response data from the partner
	            $response = $new_curl-&gt;GetCallResponseData();
	            
	            // Instantiate our transmissions class and set the transmissions data
	            $new_transmission = new Transmissions($partner_id, $partner_campuses_id, $post_url, $post_data);
	            
	            // Record our Curl response in the internal_inquiry_transmissions table			
	            $new_transmission-&gt;RecordTransmissionResponse($response);
	            
	            // Instantiate a lead tracker object
	            $LeadTracker = new MFPLeadTracker();
	            $LeadTracker-&gt;setPartnerId($partner_id);
	            $LeadTracker-&gt;setPartnerCampusId($partner_campuses_id);
	            $LeadTracker-&gt;setImportedDegreeId($this-&gt;post[&#39;program_of_interest&#39;]);
	            $LeadTracker-&gt;setInternalTransmissionId($new_transmission-&gt;GetTransmissionsId());
	            $LeadTracker-&gt;setPostDatetime(date(&#39;Y-m-d H:i:s&#39;));
	            $LeadTracker-&gt;setSuccess(0);
	            $LeadTracker-&gt;setBfLeadId($bf_lead_id);
	            $LeadTracker-&gt;setExternal(0);
	            $LeadTracker-&gt;save(true);
	            
	            // Compare the valid response
	            if (stristr($response, $this-&gt;form-&gt;accepted_response) == FALSE) {
	                
	                // Set our error message
	                $this-&gt;result_message[] = $response;
	                
	            } else {
	                
	                // Process the capping and tracking for this lead
	                // We now want to change the inquiry success value in the session to be yes
	                $_SESSION[&#39;inquiry_sucess&#39;] = &#39;yes&#39;;
	                
	                //Build the inquiry_data array for the internal inquiry database
	                $inquiry_data                        = $this-&gt;post;
	                $inquiry_data[&#39;partner_campuses_id&#39;] = (isset($partner_campuses_id) === TRUE &amp;&amp; $partner_campuses_id != &#39;&#39; ? $partner_campuses_id : $this-&gt;post[&#39;campus_of_interest&#39;]);
	                $inquiry_data[&#39;partner_degrees_id&#39;]  = (isset($this-&gt;post[&#39;program_of_interest&#39;]) === TRUE &amp;&amp; $this-&gt;post[&#39;program_of_interest&#39;] != &#39;&#39; ? $this-&gt;post[&#39;program_of_interest&#39;] : 0);
	                $inquiry_data[&#39;campaign_id&#39;]         = (isset($_COOKIE[&#39;c&#39;]) === TRUE ? $_COOKIE[&#39;c&#39;] : 1);
	                $inquiry_data[&#39;ip_address&#39;]          = $_SERVER[&#39;REMOTE_ADDR&#39;];
	                $inquiry_data[&#39;inquiry_source&#39;]      = (isset($this-&gt;post[&#39;inquiry_source&#39;]) === TRUE &amp;&amp; $this-&gt;post[&#39;inquiry_source&#39;] == &#39;internal&#39; ? &#39;internal&#39; : &#39;website&#39;);
	                
	                // Set some cookie for some unknown reason
	                setcookie(&#39;acc&#39;, &#39;yes&#39;);
	                
	                // Set the internal_inquiry_transmission_id for use with capping
	                $internal_inquiry_transmission_id = 0;
	                
	                // Defined outside of this script, after a form is submitted but before this script is included
	                if (is_object($new_transmission) === true) {
	                    $internal_inquiry_transmission_id = $new_transmission-&gt;GetTransmissionsId();
	                }
	                
	                // Insert the internal inquiry record
	                $partner_inquiry = new Partner_Inquiry($partner_id, $inquiry_data, $post_data, $internal_inquiry_transmission_id);
	                
	                // We don&#39;t want to increment the caps in dev mode
	                if (!$dev_mode) {
	                    
	                    // Check for a campus level cap
	                    $cap_member = SandboxPartnerCapMembers::initWithCampusId($inquiry_data[&#39;partner_campuses_id&#39;]);
	                    
	                    // Values for cap group to be added to lead tracker
	                    $cap_group_id        = 0;
	                    $cap_group_member_id = 0;
	                    
	                    // Hold our user ID variable incase we&#39;re not logged in
	                    $user_id = (isset($_SESSION[&#39;user_id&#39;]) ? $_SESSION[&#39;user_id&#39;] : &#39;&#39;);
	                    
	                    if ($cap_member != null) {
	                        $cap_member-&gt;incrementCap($user_id, $internal_inquiry_transmission_id);
	                        $cap_group_id        = $cap_member-&gt;getPartnerCapsId();
	                        $cap_group_member_id = $cap_member-&gt;getId();
	                    } else {
	                        // Check for a program level cap and find the partner imported degree id
	                        $cap_member = SandboxPartnerCapMembers::initWithImportedDegreeId($inquiry_data[&#39;partner_degrees_id&#39;]);
	                        if ($cap_member != null) {
	                            $cap_member-&gt;incrementCap($user_id, $internal_inquiry_transmission_id);
	                            $cap_group_id        = $cap_member-&gt;getPartnerCapsId();
	                            $cap_group_member_id = $cap_member-&gt;getId();
	                        }
	                    }
	                    
	                    // Check that this LeadTracker (defined outside of script) has been instantiated or not
	                    if (isset($LeadTracker) === TRUE &amp;&amp; is_object($LeadTracker) === TRUE) {
	                        $partner_degree = $this-&gt;partner_degrees_m-&gt;get_partner_degree($inquiry_data[&#39;partner_degrees_id&#39;], $inquiry_data[&#39;partner_campuses_id&#39;]);
	                        $LeadTracker-&gt;setCapGroupId($cap_group_id);
	                        $LeadTracker-&gt;setCapGroupMemberId($cap_group_member_id);
	                        $LeadTracker-&gt;setSuccess(1);
	                        $LeadTracker-&gt;setIsBonusFill((is_array($partner_degree) &amp;&amp; count($partner_degree) &gt; 0) ? $partner_degree[&#39;is_bonus_fill&#39;] : 0);
	                        $LeadTracker-&gt;save();
	                    } else {
	                        // Otherwise log the form submission in a file to keep track of what active forms still need updating
	                        MFPUtility::appendToUntrackedFormSubmissionLog();
	                    }
	                    
	                    // Write to log file to track what forms are being used
	                    $message = &#39;Form ID: &#39; . (isset($formid) == true ? $formid : &#39;&#39;) . &quot;\n&quot;;
	                    $message .= &#39; Partner ID: &#39; . (isset($partner_id) == true ? $partner_id : &#39;&#39;) . &quot;\n&quot;;
	                    $message .= &#39; Campus ID: &#39; . $inquiry_data[&#39;partner_campuses_id&#39;] . &quot;\n&quot;;
	                    $message .= &#39; Imported Degree ID: &#39; . $inquiry_data[&#39;partner_degrees_id&#39;] . &quot;\n&quot;;
	                    $message .= &#39; Source: &#39; . $inquiry_data[&#39;inquiry_source&#39;] . &quot;\n&quot;;
	                    $message .= &#39; Transmission ID: &#39; . $internal_inquiry_transmission_id . &quot;\n&quot;;
	                    $message .= &#39; Inquiry ID: &#39; . $partner_inquiry-&gt;inquiry_id . &quot;\n&quot;;
	                    $message .= &#39; Cap Group ID: &#39; . ($cap_member != null ? $cap_member-&gt;getPartnerCapsId() : &#39;&#39;) . &quot;\n&quot;;
	                    $message .= &#39; Cap Member ID: &#39; . ($cap_member != null ? $cap_member-&gt;getId() : &#39;&#39;);
	                    $filename = HOME_PATH . &#39;logs/forms/submission-end-&#39; . date(&#39;Y-m-d&#39;) . &#39;.log&#39;;
	                    
	                    MFPUtility::writeToLogFile($message, $filename);
	                    
	                    // Send out an email if a transmission record was not found, this should never happen
	                    if ($internal_inquiry_transmission_id == 0) {
	                        $email = new MFPEmail();
	                        $email-&gt;setTo(&#39;sschlinger@myfootpath.com, ccachor@myfootpath.com&#39;);
	                        $email-&gt;setFrom(&#39;error-reporting@myfootpath.com&#39;);
	                        $email-&gt;setSubject(&#39;Transmission Record Missing&#39;);
	                        $email-&gt;setMessage($message);
	                        $email-&gt;sendAsPlainText();
	                    }
	                    
	                }
	            }
	        } else {
	            $this-&gt;result_message[] = &#39;Sorry, this form has already been submitted with this person\&#39;s information.&#39;;
	        }
	        
	        $result = FALSE;
	        if (count($this-&gt;result_message) == 0) {
	            $result = TRUE;
	            
	            // If we&#39;re in dev mode send the posting string back
	            if ($dev_mode) {
	                $this-&gt;result_message[] = $post_data;
	                // Otherwise return the default message
	            } else {
	                $this-&gt;result_message[] = &#39;This lead has been processed by the client successfully!&#39;;
	            }
	        }
	        if ($this-&gt;form-&gt;form_id == 234) {
	            header(&quot;Content-Type: application/json&quot;);
	            echo json_encode(array(
	                &#39;result&#39; =&gt; $result,
	                &#39;result_message&#39; =&gt; &#39;success&#39;
	            ));
	            exit;
	        } else {
	            echo json_encode(array(
	                &#39;result&#39; =&gt; $result,
	                &#39;result_message&#39; =&gt; $this-&gt;result_message
	            ));
	        }
	    }
	    
	    private function _generate_form_string()
	    {
	        
	        // Begin generating the HTML for our form
	        $this-&gt;form_string = form_open(site_url() . &#39;forms/view/submit&#39;, array(
	            &#39;class&#39; =&gt; &#39;form-horizontal&#39;,
	            &#39;id&#39; =&gt; &#39;myform&#39;
	        ));
	        
	        // Make sure we have fields to loop through
	        if (count($this-&gt;form-&gt;fields) &gt; 0) {
	            // Loop through each field and get the HTML
	            foreach ($this-&gt;form-&gt;fields as $field) {
	                
	                // Set the field array
	                $this-&gt;field = $field;
	                
	                // We want to add some container divisons around our form fields
	                //$width = (in_array($this-&gt;field-&gt;field_name, $this-&gt;wide_fields)) ? &#39;span6&#39; : &#39;span3&#39;;
	                $width = &#39;&#39;;
	                
	                // Wrap the field in our field container
	                if ($field-&gt;type != &#39;hidden&#39;) {
	                    $this-&gt;form_string .= &#39;
					&lt;div class=&quot;control-group &#39; . $width . &#39;&quot;&gt;
						&#39;;
	                    
	                    
	                    // Set the field label
	                    $this-&gt;_generate_label();
	                    
	                    // Wrap the control in our container
	                    $this-&gt;form_string .= &#39;
						&lt;div class=&quot;controls&quot;&gt;
						&#39;;
	                }
	                
	                // Based on the type of field, generate the string
	                switch ($field-&gt;type) {
	                    default:
	                    case &#39;text&#39;:
	                        $this-&gt;_generate_text();
	                        break;
	                    case &#39;hidden&#39;:
	                        $this-&gt;_generate_hidden();
	                        break;
	                    case &#39;dropdown&#39;:
	                        $this-&gt;_generate_dropdown();
	                        break;
	                    case &#39;checkbox&#39;:
	                        $this-&gt;_generate_checkbox();
	                        break;
	                    case &#39;radio&#39;:
	                        $this-&gt;_generate_radio();
	                        break;
	                }
	                
	                // Close our containers
	                if ($field-&gt;type != &#39;hidden&#39;) {
	                    $this-&gt;form_string .= &#39;
							&lt;/div&gt;
						&lt;/div&gt;
						&#39;;
	                }
	            }
	        }
	        
	        // Append our form id as a hidden field
	        $this-&gt;form_string .= form_hidden(&#39;form_id&#39;, $this-&gt;form-&gt;id);
	        
	        // We need to set our BF Lead ID on every form
	        $this-&gt;form_string .= form_hidden(&#39;lead_id&#39;, (isset($_GET[&#39;lead_id&#39;]) ? $_GET[&#39;lead_id&#39;] : &#39;&#39;));
	        
	        // If in test mode add a hidden test =&gt; test input field
	        if ($this-&gt;uri-&gt;segment(5) == &#39;test&#39;) {
	            $this-&gt;form_string .= form_hidden(&#39;myfootpath_test&#39;, &#39;myfootpath_test&#39;);
	        }
	        
	        // If in sandbox mode add a hidden sandbox =&gt; true input field
	        if ($this-&gt;uri-&gt;segment(5) == &#39;sandbox&#39;) {
	            $this-&gt;form_string .= form_hidden(&#39;sandbox&#39;, &#39;sandbox&#39;);
	        }
	        
	        // Add our submit buttons
	        $this-&gt;form_string .= &#39;
			&lt;hr&gt;
			&lt;p&gt;
				&lt;button class=&quot;btn btn-primary&quot; id=&quot;submit_button&quot; type=&quot;submit&quot;&gt;Submit&lt;/button&gt;
			&lt;/p&gt;
			&#39;;
	        
	        // If we have a LeadID embed script, place it here
	        if (!empty($this-&gt;form-&gt;leadid_embed_script)) {
	            $this-&gt;form_string .= $this-&gt;form-&gt;leadid_embed_script;
	        }
	        
	        // Close the form
	        $this-&gt;form_string .= form_close();
	    }
	    
	    private function _generate_validation_string()
	    {
	        
	        // String Holder
	        $str = &#39;&#39;;
	        
	        // Get our rules
	        $restrictions = $this-&gt;form-&gt;restrictions;
	        
	        //echo &#39;&lt;pre&gt;&#39;; print_r($restrictions); echo &#39;&lt;/pre&gt;&#39;;
	        
	        // If we have any, loop through the rules
	        if (is_array($restrictions) &amp;&amp; count($restrictions) &gt; 0) {
	            
	            foreach ($restrictions as $res) {
	                $rule    = $res-&gt;restriction_name;
	                $message = $res-&gt;restriction_message;
	                $count   = count($res-&gt;rules);
	                $i       = 1;
	                $str .= &#39;
	if(&#39;;
	                
	                if ($count &gt; 0) {
	                    foreach ($res-&gt;rules as $rule) {
	                        $rule_condition = ($rule-&gt;rule_condition == &#39;and&#39;) ? &#39;&amp;&amp;&#39; : &#39;||&#39;;
	                        $condition      = ($i == $count) ? &#39;&#39; : &#39; &#39; . $rule_condition . &#39; &#39;;
	                        $str .= $this-&gt;_return_validation_rule_for_type($rule-&gt;type, $rule-&gt;name, $rule-&gt;operator, addslashes($rule-&gt;value), $rule-&gt;attribute) . $condition;
	                        $i++;
	                    }
	                }
	                $str .= &#39;) {
		confirmation_alert += &quot;&#39; . addslashes($message) . &#39;&quot; + &quot;\n&quot;;
	}
	&#39;;
	            }
	            
	        }
	        
	        //echo &#39;&lt;pre&gt;&#39;; print_r($errors); echo &#39;&lt;/pre&gt;&#39;;
	        
	        // Loop through our rules
	        
	        // Validate our rules
	        
	        
	        return $str;
	    }
	    
	    
	    /**
	     * _return_validation_rule_for_type function.
	     * This method generates the jquery validation string based on the type of field and field operator
	     * ex (CONTAINS, IN, NOT IN, &lt;, &gt;, ==, !=)
	     * 
	     * @access private
	     * @param mixed $type
	     * @param mixed $field_name
	     * @param mixed $operator
	     * @param mixed $value
	     * @return string
	     */
	    private function _return_validation_rule_for_type($type, $field_name, $operator, $value, $attribute)
	    {
	        
	        // If this is a dropdown value, make sure we have the value of the option selected
	        
	        
	        // In some cases, we want to grab the text value in jQuery versus the actual value attribute
	        $value_attribute = (empty($attribute) || $attribute == &#39;&#39;) ? &#39;val()&#39; : $attribute;
	        // If this is a dropdown value, make sure we have the value of the option selected
	        $selected        = ($type == &#39;dropdown&#39;) ? &#39; option:selected&#39; : &#39;&#39;;
	        // Based on the operator, we return different methods of jquery validation
	        switch ($operator) {
	            // String operation
	            case &#39;CONTAINS&#39;:
	                $rule = &#39;$(&quot;#&#39; . $field_name . $selected . &#39;&quot;).&#39; . $value_attribute . &#39;.indexOf(&quot;&#39; . $value . &#39;&quot;) &gt;= 0&#39;;
	                break;
	            // Array operation, we convert comma separated lists into an &quot;&#39;&quot; separated array
	            case &#39;IN&#39;:
	                if (strstr($value, &#39;,&#39;)) {
	                    $values = explode(&#39;,&#39;, $value);
	                    $temp   = array();
	                    foreach ($values as $val) {
	                        $temp[] = &quot;&#39;&quot; . trim($val) . &quot;&#39;&quot;;
	                    }
	                    $value = implode(&#39;,&#39;, $temp);
	                }
	                $rule = &#39;$.inArray($(&quot;#&#39; . $field_name . $selected . &#39;&quot;).&#39; . $value_attribute . &#39;, [&#39; . $value . &#39;]) &gt;= 0&#39;;
	                break;
	            // We do the same for NOT IN array
	            case &#39;NOT IN&#39;:
	                if (strstr($value, &#39;,&#39;)) {
	                    $values = explode(&#39;,&#39;, $value);
	                    $temp   = array();
	                    foreach ($values as $val) {
	                        $temp[] = &quot;&#39;&quot; . trim($val) . &quot;&#39;&quot;;
	                    }
	                    $value = implode(&#39;,&#39;, $temp);
	                }
	                $rule = &#39;$.inArray($(&quot;#&#39; . $field_name . $selected . &#39;&quot;).&#39; . $value_attribute . &#39;.toString() , [&#39; . $value . &#39;]) == -1&#39;;
	                break;
	            // We just do our basic field_name, operator, value condition
	            default:
	                $rule = &#39;$(&quot;#&#39; . $field_name . $selected . &#39;&quot;).&#39; . $value_attribute . &#39; &#39; . $operator . &#39; &#39; . (is_numeric($value) ? $value : &#39;&quot;&#39; . $value . &#39;&quot;&#39;);
	                break;
	                
	        }
	        //if its a date return the date and compare
	        if (strlen($attribute) &gt;= 6 &amp;&amp; substr($attribute, 0, 6) == &#39;date()&#39;) {
	            //get the date relative to the value to compare it to the actual date
	            $year    = idate(&#39;Y&#39;) - $value;
	            $month   = idate(&#39;m&#39;);
	            $day     = idate(&#39;d&#39;);
	            $str_val = &#39;new Date(&quot;&#39; . $month . &#39;/&#39; . $day . &#39;/&#39; . $year . &#39;&quot;)&#39;;
	            $rule    = $str_val . &#39; &#39; . $operator . &#39; &#39; . &#39;new Date( $(&quot;#&#39; . $field_name . $selected . &#39;&quot;).val())&#39;;
	        }
	        // Return our string
	        return $rule;
	        
	    }
	    
	    private function _validate_rule($rules = array())
	    {
	        
	        echo &#39;&lt;pre&gt;&#39;;
	        print_r($rules);
	        echo &#39;&lt;/pre&gt;&#39;;
	        
	        // Go through our rules and evaluate
	        foreach ($rules as $rule) {
	            if (array_key_exists($rule-&gt;name, $this-&gt;post)) {
	                echo &#39;Here&#39;;
	            }
	        }
	        
	        //return FALSE;
	        
	    }
	    
	    private function _validate_state_zip($zip, $state)
	    {
	        return TRUE;
	    }
	    
	    private function _process_success()
	    {
	    }
	    
	    private function _get_post_string($form, $post)
	    {
	        
	        // Load our parser library
	        $this-&gt;load-&gt;library(&#39;parser&#39;);
	        
	        // Our data array that we use our parser class to replace tag with value
	        $tags = array(
	            &#39;date&#39; =&gt; date(&#39;Y-m-d&#39;),
	            &#39;datetime&#39; =&gt; date(&#39;Y-m-d H:i:s&#39;),
	            &#39;timezone&#39; =&gt; &#39;CST&#39;,
	            &#39;email&#39; =&gt; (isset($post[&#39;email&#39;]) ? $post[&#39;email&#39;] : &#39;&#39;),
	            &#39;phone&#39; =&gt; (isset($post[&#39;phone&#39;]) ? $post[&#39;phone&#39;] : &#39;&#39;),
	            &#39;email_phone&#39; =&gt; (isset($post[&#39;email&#39;]) ? $post[&#39;email&#39;] : &#39;&#39;) . (isset($post[&#39;phone&#39;]) ? $post[&#39;phone&#39;] : &#39;&#39;),
	            &#39;time&#39; =&gt; date(&#39;H:i:s&#39;),
	            &#39;timestamp&#39; =&gt; microtime(),
	            &#39;ip_address&#39; =&gt; $_SERVER[&#39;REMOTE_ADDR&#39;],
	            &#39;per_lead_unique_id&#39; =&gt; time()
	            //, &#39;tracking_id&#39; =&gt; $this-&gt;create_tracking_id()
	                ,
	            &#39;tracking_id&#39; =&gt; &#39;&#39;
	        );
	        
	        // Begin our holder string
	        $str = &#39;&#39;;
	        
	        // Hold our counter
	        $i = 0;
	        
	        // Loop through our form fields and post array and map to posting keys
	        foreach ($post as $key =&gt; $value) {
	            
	            $query_string = ($i == 0) ? &#39;&#39; : &#39;&amp;&#39;;
	            
	            // If we have a tag value {date} we want to use our parser to replace values
	            // from the data array above
	            if (strstr($value, &#39;{&#39;)) {
	                if (strstr($value, &#39;tracking_id&#39;)) {
	                    $value = $this-&gt;create_tracking_id();
	                } else {
	                    $value = $this-&gt;parser-&gt;parse_string($value, $tags, TRUE);
	                }
	            }
	            
	            // Campus of Interest we need to get the client school ID
	            if ($key == &#39;campus_of_interest&#39;) {
	                $value = $this-&gt;forms_m-&gt;get_campus_client_id($value);
	            }
	            // We need to get the program value from the ID
	            if ($key == &#39;program_of_interest&#39;) {
	                $value = $this-&gt;forms_m-&gt;get_program_value($value);
	            }
	            
	            // We need to set the IP address manually
	            if ($key == &#39;ip_address&#39;) {
	                $value = $_SERVER[&#39;SERVER_ADDR&#39;];
	            }
	            
	            // Format our phone number
	            if (strstr($key, &#39;phone&#39;)) {
	                $value = $this-&gt;_cleanse_phone_number($value);
	            }
	            
	            // Get the posting key to send to the client
	            $post_key = $this-&gt;forms_m-&gt;get_post_key($key, $form-&gt;id);
	            
	            //echo $post_key;
	            
	            if (!empty($post_key) &amp;&amp; $post_key != &#39;&#39;) {
	                // Generate our key =&gt; value pairs for the query string
	                $str .= $query_string . $post_key . &#39;=&#39; . $value;
	            }
	            
	            $i++;
	        }
	        
	        // Return our string
	        return $str;
	    }
	    
	    private function create_tracking_id()
	    {
	        $lm_class = &#39;LeadManagement&#39;;
	        global $mysqli;
	        $data_array = array();
	        require_once &#39;colleges/source_tracking_processing.php&#39;;
	        
	        return $data_array[&#39;traffic_id_only_source_tracking_string&#39;];
	    }
	    
	    private function _cleanse_phone_number($phone)
	    {
	        $phone_cleanse_array = array(
	            &#39;-&#39;,
	            &#39; &#39;,
	            &#39;(&#39;,
	            &#39;)&#39;
	        );
	        return str_replace($phone_cleanse_array, &#39;&#39;, $phone);
	    }
	    
	    private function _submitted_leads_check($partner_id, $email, $last_name)
	    {
	        
	        $result = $this-&gt;forms_m-&gt;submitted_leads_check($partner_id, $email, $last_name);
	        return $result;
	    }
	    
	    private function _generate_label()
	    {
	        $req  = ($this-&gt;field-&gt;required == &#39;1&#39;) ? &#39; *&#39; : &#39;&#39;;
	        $attr = array(
	            &#39;class&#39; =&gt; &#39;control-label&#39;
	        );
	        if ($this-&gt;field-&gt;field_type != &#39;hidden&#39;) {
	            $this-&gt;form_string .= form_label($this-&gt;field-&gt;label . $req, $this-&gt;field-&gt;field_name, $attr);
	        }
	    }
	    
	    private function _generate_hidden()
	    {
	        // Get our field name and value
	        $name = $this-&gt;field-&gt;field_name;
	        // If Lead ID we need an ID added to hidden field (hack!)
	        $id   = &#39;&#39;;
	        if ($name == &#39;universal_leadid&#39;) {
	            $id = &#39; id=&quot;leadid_token&quot;&#39;;
	        }
	        
	        else if ($name == &#39;nocontext&#39;) {
	            // this does not work! It needs to be revised.
	            // If nocontext we need a hidden posting name to lookup posting keys
	            $name = $this-&gt;field-&gt;name;
	        }
	        $value = $this-&gt;_get_hidden_value();
	        if ($name == &#39;source_id&#39;) {
	            $value = (isset($_GET[&#39;source_id&#39;]) ? $_GET[&#39;source_id&#39;] : $value);
	        }
	        
	        // Generate our hidden input string
	        //$this-&gt;form_string .= form_hidden($name, $value);
	        $this-&gt;form_string .= &#39;&lt;input type=&quot;hidden&quot; name=&quot;&#39; . $name . &#39;&quot; value=&quot;&#39; . $value . &#39;&quot;&#39; . $id . &#39; /&gt;&#39;;
	    }
	    
	    private function _generate_text()
	    {
	        // For our form validation, we set rules in the classname so create an empty string
	        $class = &#39;&#39;;
	        // Begin setting our form rules
	        if ($this-&gt;field-&gt;required == &#39;1&#39;) {
	            $class .= &#39;required &#39;;
	        }
	        if ($this-&gt;field-&gt;numeric_only == &#39;1&#39;) {
	            $class .= &#39;digits &#39;;
	        }
	        if ($this-&gt;field-&gt;email == &#39;1&#39;) {
	            $class .= &#39;email &#39;;
	        }
	        if ($this-&gt;field-&gt;min_value != &#39;&#39; &amp;&amp; $this-&gt;field-&gt;min_value != &#39;0&#39;) {
	            $class .= &#39;min[&#39; . $this-&gt;field-&gt;min_value . &#39;] &#39;;
	        }
	        if ($this-&gt;field-&gt;max_value != &#39;&#39; &amp;&amp; $this-&gt;field-&gt;max_value != &#39;0&#39;) {
	            $class .= &#39;max[&#39; . $this-&gt;field-&gt;max_value . &#39;]&#39;;
	        }
	        
	        // Get our input value (if there is one)
	        $value = $this-&gt;_get_hidden_value();
	        // Begin our data array to pass to the form input helper
	        if ($this-&gt;field-&gt;name == &#39;source_id&#39;) {
	            $value = (isset($_GET[&#39;source_id&#39;]) ? $_GET[&#39;source_id&#39;] : $value);
	        }
	        $data = array(
	            &#39;name&#39; =&gt; $this-&gt;field-&gt;field_name,
	            &#39;id&#39; =&gt; $this-&gt;field-&gt;field_name,
	            &#39;value&#39; =&gt; $value,
	            &#39;class&#39; =&gt; $class
	        );
	        
	        // Checked values to aid in validating html created by including these empty values
	        ($this-&gt;field-&gt;max_length == &#39;0&#39;) ? &#39;&#39; : $data[&#39;maxlength&#39;] = $this-&gt;field-&gt;max_length;
	        ($this-&gt;field-&gt;min_length == &#39;0&#39;) ? &#39;&#39; : $data[&#39;minlength&#39;] = $this-&gt;field-&gt;min_length;
	        /*if (array_key_exists(&#39;maxlength&#39;, $data) &amp;&amp; array_key_exists(&#39;minlength&#39;, $data) &amp;&amp; $data[&#39;maxlength&#39;] == $data[&#39;minlength&#39;])
	        {
	        unset($data[&#39;minlength&#39;]);
	        }*/
	        
	        
	        // Append to our form string						
	        $this-&gt;form_string .= form_input($data);
	    }
	    
	    private function _generate_dropdown()
	    {
	        // Get the form options for our dropdown
	        $options = $this-&gt;_get_options();
	        // Check if this field is required
	        $class   = ($this-&gt;field-&gt;required == &#39;1&#39;) ? &#39;required&#39; : &#39;&#39;;
	        // Append to our form
	        $this-&gt;form_string .= form_dropdown($this-&gt;field-&gt;field_name, $options, &#39;&#39;, &#39;id=&quot;&#39; . $this-&gt;field-&gt;field_name . &#39;&quot; class=&quot;&#39; . $class . &#39;&quot;&#39;);
	    }
	    
	    private function _generate_checkbox()
	    {
	        // Get our value
	        $value = $this-&gt;_get_hidden_value();
	        ;
	        // Check if this field is required
	        $class = ($this-&gt;field-&gt;required == &#39;1&#39;) ? &#39;required&#39; : &#39;&#39;;
	        // Append to our form
	        $this-&gt;form_string .= form_checkbox($this-&gt;field-&gt;field_name, $value, TRUE, &#39;id=&quot;&#39; . $this-&gt;field-&gt;field_name . &#39;&quot; class=&quot;&#39; . $class . &#39;&quot;&#39;);
	    }
	    
	    private function _generate_radio()
	    {
	        
	    }
	    
	    private function _get_value()
	    {
	        // Create our holder string
	        $value = &#39;&#39;;
	        // Set the field value if it exists in options, otherwise just leave empty
	        if (array_key_exists(&#39;options&#39;, $this-&gt;field)) {
	            if (is_array($this-&gt;field-&gt;options)) {
	                foreach ($this-&gt;field-&gt;options as $option) {
	                    //echo &#39;&lt;pre&gt;&#39;; print_r($option); echo &#39;&lt;/pre&gt;&#39;;
	                    $value = $option-&gt;value;
	                }
	                //should be modified so if the field is hidden then the field automatically takes the default value.
	                
	                // If we don&#39;t have option values take the default value of the field
	            } else if (array_key_exists(&#39;default_value&#39;, $this-&gt;field)) {
	                $value = $this-&gt;field-&gt;default_value;
	            }
	        }
	        return $value;
	    }
	    /*
	     * This function is different from _get_value in that it looks for the default value and ignores any options associated to the field. 
	     */
	    private function _get_hidden_value()
	    {
	        // Create our holder string
	        $value = &#39;&#39;;
	        // Set the field value if it exists in options, otherwise just leave empty
	        if (array_key_exists(&#39;default_value&#39;, $this-&gt;field)) {
	            $value = $this-&gt;field-&gt;default_value;
	        }
	        return $value;
	    }
	    private function _get_options()
	    {
	        // Set an empty array as dropdown helper expects it if no records
	        $arr = array();
	        // Check that we have options to loop through and create our formatted array
	        if (array_key_exists(&#39;options&#39;, $this-&gt;field) &amp;&amp; is_array($this-&gt;field-&gt;options)) {
	            foreach ($this-&gt;field-&gt;options as $options) {
	                //if($options-&gt;value == &#39;0&#39;) { $options-&gt;value = &#39;&#39;; }
	                $arr[$options-&gt;value] = $options-&gt;display;
	            }
	        }
	        return $arr;
	    }
	    
	    /**
	     * This will generalize the response message so a user wont
	     * see all of the error specifics. This will simplify the form
	     * leading to less confusion on the floor and easier classification 
	     * of errors.
	     * @param integer id of the the transmission
	     * @access private
	     * @return string the simplified error message
	     */
	    private function get_generic_error_message($id)
	    {
	        return $this-&gt;forms_m-&gt;get_gen_response($id);
	    }
	}
</pre></td></tr></table></div>
